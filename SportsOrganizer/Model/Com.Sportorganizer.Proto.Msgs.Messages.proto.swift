/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "messages.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Com { public struct Sportorganizer { public struct Proto { public struct Msgs { }}}}

public extension Com.Sportorganizer.Proto.Msgs {
    public struct MessagesRoot {
        public static let `default` = MessagesRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum ErrorType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case system = 0
        case business = 1
        case server = 2
        case client = 3
        case unknown = 4
        public func toString() -> String {
            switch self {
            case .system: return "SYSTEM"
            case .business: return "BUSINESS"
            case .server: return "SERVER"
            case .client: return "CLIENT"
            case .unknown: return "UNKNOWN"
            }
        }
        public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.ErrorType {
            switch str {
            case "SYSTEM":    return .system
            case "BUSINESS":    return .business
            case "SERVER":    return .server
            case "CLIENT":    return .client
            case "UNKNOWN":    return .unknown
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .system: return ".system"
            case .business: return ".business"
            case .server: return ".server"
            case .client: return ".client"
            case .unknown: return ".unknown"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:ErrorType, rhs:ErrorType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    ///main wrapper message
    final public class AppMessage : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.AppMessage, rhs: Com.Sportorganizer.Proto.Msgs.AppMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasChannelId == rhs.hasChannelId) && (!lhs.hasChannelId || lhs.channelId == rhs.channelId)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
            fieldCheck = fieldCheck && (lhs.hasError == rhs.hasError) && (!lhs.hasError || lhs.error == rhs.error)
            fieldCheck = fieldCheck && (lhs.hasInitServerMessage == rhs.hasInitServerMessage) && (!lhs.hasInitServerMessage || lhs.initServerMessage == rhs.initServerMessage)
            fieldCheck = fieldCheck && (lhs.hasRegistrationRequest == rhs.hasRegistrationRequest) && (!lhs.hasRegistrationRequest || lhs.registrationRequest == rhs.registrationRequest)
            fieldCheck = fieldCheck && (lhs.hasRegistrationResponse == rhs.hasRegistrationResponse) && (!lhs.hasRegistrationResponse || lhs.registrationResponse == rhs.registrationResponse)
            fieldCheck = fieldCheck && (lhs.hasRegistrationToken == rhs.hasRegistrationToken) && (!lhs.hasRegistrationToken || lhs.registrationToken == rhs.registrationToken)
            fieldCheck = fieldCheck && (lhs.hasRegistrationConfirm == rhs.hasRegistrationConfirm) && (!lhs.hasRegistrationConfirm || lhs.registrationConfirm == rhs.registrationConfirm)
            fieldCheck = fieldCheck && (lhs.hasSignIn == rhs.hasSignIn) && (!lhs.hasSignIn || lhs.signIn == rhs.signIn)
            fieldCheck = fieldCheck && (lhs.hasSignInResponse == rhs.hasSignInResponse) && (!lhs.hasSignInResponse || lhs.signInResponse == rhs.signInResponse)
            fieldCheck = fieldCheck && (lhs.hasSimpleNotification == rhs.hasSimpleNotification) && (!lhs.hasSimpleNotification || lhs.simpleNotification == rhs.simpleNotification)
            fieldCheck = fieldCheck && (lhs.hasSimpleNotificationPush == rhs.hasSimpleNotificationPush) && (!lhs.hasSimpleNotificationPush || lhs.simpleNotificationPush == rhs.simpleNotificationPush)
            fieldCheck = fieldCheck && (lhs.hasSimpleSystemMessage == rhs.hasSimpleSystemMessage) && (!lhs.hasSimpleSystemMessage || lhs.simpleSystemMessage == rhs.simpleSystemMessage)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //OneOf declaration start

        public enum HandshakeMessage {
            case OneOfHandshakeMessageNotSet

            public func checkOneOfIsSet() -> Bool {
                switch self {
                case .OneOfHandshakeMessageNotSet: return false
                default: return true
                }
            }
            case InitServerMessage(Com.Sportorganizer.Proto.Msgs.InitialServerMessage)

            public static func getInitServerMessage(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage? {
                switch value {
                case .InitServerMessage(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case RegistrationRequest(Com.Sportorganizer.Proto.Msgs.RegistrationRequest)

            public static func getRegistrationRequest(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest? {
                switch value {
                case .RegistrationRequest(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case RegistrationResponse(Com.Sportorganizer.Proto.Msgs.RegistrationResponse)

            public static func getRegistrationResponse(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse? {
                switch value {
                case .RegistrationResponse(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case RegistrationToken(Com.Sportorganizer.Proto.Msgs.RegistrationToken)

            public static func getRegistrationToken(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.RegistrationToken? {
                switch value {
                case .RegistrationToken(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case RegistrationConfirm(Com.Sportorganizer.Proto.Msgs.RegistrationConfirm)

            public static func getRegistrationConfirm(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm? {
                switch value {
                case .RegistrationConfirm(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case SignIn(Com.Sportorganizer.Proto.Msgs.SignInRequest)

            public static func getSignIn(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.SignInRequest? {
                switch value {
                case .SignIn(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case SignInResponse(Com.Sportorganizer.Proto.Msgs.SignInResponse)

            public static func getSignInResponse(_ value:HandshakeMessage) -> Com.Sportorganizer.Proto.Msgs.SignInResponse? {
                switch value {
                case .SignInResponse(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
        }
        //OneOf declaration end

        fileprivate var storageHandshakeMessage:AppMessage.HandshakeMessage =  AppMessage.HandshakeMessage.OneOfHandshakeMessageNotSet
        public func getOneOfHandshakeMessage() ->  AppMessage.HandshakeMessage {
            let copyObjectHandshakeMessage = storageHandshakeMessage
            return copyObjectHandshakeMessage
        }


        //OneOf declaration start

        public enum NotificationMessage {
            case OneOfNotificationMessageNotSet

            public func checkOneOfIsSet() -> Bool {
                switch self {
                case .OneOfNotificationMessageNotSet: return false
                default: return true
                }
            }
            case SimpleNotification(Com.Sportorganizer.Proto.Msgs.SimpleNotification)

            public static func getSimpleNotification(_ value:NotificationMessage) -> Com.Sportorganizer.Proto.Msgs.SimpleNotification? {
                switch value {
                case .SimpleNotification(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
            case SimpleNotificationPush(Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush)

            public static func getSimpleNotificationPush(_ value:NotificationMessage) -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush? {
                switch value {
                case .SimpleNotificationPush(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
        }
        //OneOf declaration end

        fileprivate var storageNotificationMessage:AppMessage.NotificationMessage =  AppMessage.NotificationMessage.OneOfNotificationMessageNotSet
        public func getOneOfNotificationMessage() ->  AppMessage.NotificationMessage {
            let copyObjectNotificationMessage = storageNotificationMessage
            return copyObjectNotificationMessage
        }


        //OneOf declaration start

        public enum SystemMessage {
            case OneOfSystemMessageNotSet

            public func checkOneOfIsSet() -> Bool {
                switch self {
                case .OneOfSystemMessageNotSet: return false
                default: return true
                }
            }
            case SimpleSystemMessage(Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage)

            public static func getSimpleSystemMessage(_ value:SystemMessage) -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage? {
                switch value {
                case .SimpleSystemMessage(let enumValue):
                    return enumValue
                    default: return nil
                }
            }
        }
        //OneOf declaration end

        fileprivate var storageSystemMessage:AppMessage.SystemMessage =  AppMessage.SystemMessage.OneOfSystemMessageNotSet
        public func getOneOfSystemMessage() ->  AppMessage.SystemMessage {
            let copyObjectSystemMessage = storageSystemMessage
            return copyObjectSystemMessage
        }


            //Enum type declaration start 

            public enum MessageType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case error = 0
                case eventsLite = 1
                case eventsFull = 2
                case event = 3
                public func toString() -> String {
                    switch self {
                    case .error: return "ERROR"
                    case .eventsLite: return "EVENTS_LITE"
                    case .eventsFull: return "EVENTS_FULL"
                    case .event: return "EVENT"
                    }
                }
                public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType {
                    switch str {
                    case "ERROR":    return .error
                    case "EVENTS_LITE":    return .eventsLite
                    case "EVENTS_FULL":    return .eventsFull
                    case "EVENT":    return .event
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .error: return ".error"
                    case .eventsLite: return ".eventsLite"
                    case .eventsFull: return ".eventsFull"
                    case .event: return ".event"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:MessageType, rhs:MessageType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 



            //Enum type declaration start 

            public enum MessageChannel:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case normal = 0
                case chat = 1
                case system = 2
                case hanshake = 3
                case stream = 4
                case notification = 5
                public func toString() -> String {
                    switch self {
                    case .normal: return "NORMAL"
                    case .chat: return "CHAT"
                    case .system: return "SYSTEM"
                    case .hanshake: return "HANSHAKE"
                    case .stream: return "STREAM"
                    case .notification: return "NOTIFICATION"
                    }
                }
                public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel {
                    switch str {
                    case "NORMAL":    return .normal
                    case "CHAT":    return .chat
                    case "SYSTEM":    return .system
                    case "HANSHAKE":    return .hanshake
                    case "STREAM":    return .stream
                    case "NOTIFICATION":    return .notification
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .normal: return ".normal"
                    case .chat: return ".chat"
                    case .system: return ".system"
                    case .hanshake: return ".hanshake"
                    case .stream: return ".stream"
                    case .notification: return ".notification"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:MessageChannel, rhs:MessageChannel) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 



            //Enum type declaration start 

            public enum MessageStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case ok = 0
                case notOk = 1
                case ignored = 2
                case unexpected = 3
                public func toString() -> String {
                    switch self {
                    case .ok: return "OK"
                    case .notOk: return "NOT_OK"
                    case .ignored: return "IGNORED"
                    case .unexpected: return "UNEXPECTED"
                    }
                }
                public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus {
                    switch str {
                    case "OK":    return .ok
                    case "NOT_OK":    return .notOk
                    case "IGNORED":    return .ignored
                    case "UNEXPECTED":    return .unexpected
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .ok: return ".ok"
                    case .notOk: return ".notOk"
                    case .ignored: return ".ignored"
                    case .unexpected: return ".unexpected"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:MessageStatus, rhs:MessageStatus) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var channelId:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel.normal
        public fileprivate(set) var hasChannelId:Bool = false
        public fileprivate(set) var type:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType.error
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var status:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus.ok
        public fileprivate(set) var hasStatus:Bool = false
        ///time-stamps
        public fileprivate(set) var timestamp:String = ""
        public fileprivate(set) var hasTimestamp:Bool = false

        public fileprivate(set) var error:Com.Sportorganizer.Proto.Msgs.SysError!
        public fileprivate(set) var hasError:Bool = false
        public fileprivate(set) var initServerMessage:Com.Sportorganizer.Proto.Msgs.InitialServerMessage!{
            get {
                return AppMessage.HandshakeMessage.getInitServerMessage(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.InitServerMessage(newvalue)
            }
        }
        public fileprivate(set) var hasInitServerMessage:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getInitServerMessage(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var registrationRequest:Com.Sportorganizer.Proto.Msgs.RegistrationRequest!{
            get {
                return AppMessage.HandshakeMessage.getRegistrationRequest(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.RegistrationRequest(newvalue)
            }
        }
        public fileprivate(set) var hasRegistrationRequest:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getRegistrationRequest(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var registrationResponse:Com.Sportorganizer.Proto.Msgs.RegistrationResponse!{
            get {
                return AppMessage.HandshakeMessage.getRegistrationResponse(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.RegistrationResponse(newvalue)
            }
        }
        public fileprivate(set) var hasRegistrationResponse:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getRegistrationResponse(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var registrationToken:Com.Sportorganizer.Proto.Msgs.RegistrationToken!{
            get {
                return AppMessage.HandshakeMessage.getRegistrationToken(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.RegistrationToken(newvalue)
            }
        }
        public fileprivate(set) var hasRegistrationToken:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getRegistrationToken(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var registrationConfirm:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm!{
            get {
                return AppMessage.HandshakeMessage.getRegistrationConfirm(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.RegistrationConfirm(newvalue)
            }
        }
        public fileprivate(set) var hasRegistrationConfirm:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getRegistrationConfirm(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var signIn:Com.Sportorganizer.Proto.Msgs.SignInRequest!{
            get {
                return AppMessage.HandshakeMessage.getSignIn(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.SignIn(newvalue)
            }
        }
        public fileprivate(set) var hasSignIn:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getSignIn(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var signInResponse:Com.Sportorganizer.Proto.Msgs.SignInResponse!{
            get {
                return AppMessage.HandshakeMessage.getSignInResponse(storageHandshakeMessage)
            }
            set (newvalue) {
                storageHandshakeMessage = AppMessage.HandshakeMessage.SignInResponse(newvalue)
            }
        }
        public fileprivate(set) var hasSignInResponse:Bool {
            get {
                guard let _ = AppMessage.HandshakeMessage.getSignInResponse(storageHandshakeMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var simpleNotification:Com.Sportorganizer.Proto.Msgs.SimpleNotification!{
            get {
                return AppMessage.NotificationMessage.getSimpleNotification(storageNotificationMessage)
            }
            set (newvalue) {
                storageNotificationMessage = AppMessage.NotificationMessage.SimpleNotification(newvalue)
            }
        }
        public fileprivate(set) var hasSimpleNotification:Bool {
            get {
                guard let _ = AppMessage.NotificationMessage.getSimpleNotification(storageNotificationMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var simpleNotificationPush:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush!{
            get {
                return AppMessage.NotificationMessage.getSimpleNotificationPush(storageNotificationMessage)
            }
            set (newvalue) {
                storageNotificationMessage = AppMessage.NotificationMessage.SimpleNotificationPush(newvalue)
            }
        }
        public fileprivate(set) var hasSimpleNotificationPush:Bool {
            get {
                guard let _ = AppMessage.NotificationMessage.getSimpleNotificationPush(storageNotificationMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        public fileprivate(set) var simpleSystemMessage:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage!{
            get {
                return AppMessage.SystemMessage.getSimpleSystemMessage(storageSystemMessage)
            }
            set (newvalue) {
                storageSystemMessage = AppMessage.SystemMessage.SimpleSystemMessage(newvalue)
            }
        }
        public fileprivate(set) var hasSimpleSystemMessage:Bool {
            get {
                guard let _ = AppMessage.SystemMessage.getSimpleSystemMessage(storageSystemMessage) else {
                    return false
                }
                return true
            }
            set(newValue) {
            }
        }
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasChannelId {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:channelId.rawValue)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:status.rawValue)
            }
            if hasTimestamp {
                try codedOutputStream.writeString(fieldNumber: 4, value:timestamp)
            }
            if hasError {
                try codedOutputStream.writeMessage(fieldNumber: 5, value:error)
            }
            if hasInitServerMessage {
                try codedOutputStream.writeMessage(fieldNumber: 6, value:initServerMessage)
            }
            if hasRegistrationRequest {
                try codedOutputStream.writeMessage(fieldNumber: 7, value:registrationRequest)
            }
            if hasRegistrationResponse {
                try codedOutputStream.writeMessage(fieldNumber: 8, value:registrationResponse)
            }
            if hasRegistrationToken {
                try codedOutputStream.writeMessage(fieldNumber: 9, value:registrationToken)
            }
            if hasRegistrationConfirm {
                try codedOutputStream.writeMessage(fieldNumber: 10, value:registrationConfirm)
            }
            if hasSignIn {
                try codedOutputStream.writeMessage(fieldNumber: 11, value:signIn)
            }
            if hasSignInResponse {
                try codedOutputStream.writeMessage(fieldNumber: 12, value:signInResponse)
            }
            if hasSimpleNotification {
                try codedOutputStream.writeMessage(fieldNumber: 13, value:simpleNotification)
            }
            if hasSimpleNotificationPush {
                try codedOutputStream.writeMessage(fieldNumber: 14, value:simpleNotificationPush)
            }
            if hasSimpleSystemMessage {
                try codedOutputStream.writeMessage(fieldNumber: 15, value:simpleSystemMessage)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasChannelId) {
                serialize_size += channelId.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if hasTimestamp {
                serialize_size += timestamp.computeStringSize(fieldNumber: 4)
            }
            if hasError {
                if let varSizeerror = error?.computeMessageSize(fieldNumber: 5) {
                    serialize_size += varSizeerror
                }
            }
            if hasInitServerMessage {
                if let varSizeinitServerMessage = initServerMessage?.computeMessageSize(fieldNumber: 6) {
                    serialize_size += varSizeinitServerMessage
                }
            }
            if hasRegistrationRequest {
                if let varSizeregistrationRequest = registrationRequest?.computeMessageSize(fieldNumber: 7) {
                    serialize_size += varSizeregistrationRequest
                }
            }
            if hasRegistrationResponse {
                if let varSizeregistrationResponse = registrationResponse?.computeMessageSize(fieldNumber: 8) {
                    serialize_size += varSizeregistrationResponse
                }
            }
            if hasRegistrationToken {
                if let varSizeregistrationToken = registrationToken?.computeMessageSize(fieldNumber: 9) {
                    serialize_size += varSizeregistrationToken
                }
            }
            if hasRegistrationConfirm {
                if let varSizeregistrationConfirm = registrationConfirm?.computeMessageSize(fieldNumber: 10) {
                    serialize_size += varSizeregistrationConfirm
                }
            }
            if hasSignIn {
                if let varSizesignIn = signIn?.computeMessageSize(fieldNumber: 11) {
                    serialize_size += varSizesignIn
                }
            }
            if hasSignInResponse {
                if let varSizesignInResponse = signInResponse?.computeMessageSize(fieldNumber: 12) {
                    serialize_size += varSizesignInResponse
                }
            }
            if hasSimpleNotification {
                if let varSizesimpleNotification = simpleNotification?.computeMessageSize(fieldNumber: 13) {
                    serialize_size += varSizesimpleNotification
                }
            }
            if hasSimpleNotificationPush {
                if let varSizesimpleNotificationPush = simpleNotificationPush?.computeMessageSize(fieldNumber: 14) {
                    serialize_size += varSizesimpleNotificationPush
                }
            }
            if hasSimpleSystemMessage {
                if let varSizesimpleSystemMessage = simpleSystemMessage?.computeMessageSize(fieldNumber: 15) {
                    serialize_size += varSizesimpleSystemMessage
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
            return Com.Sportorganizer.Proto.Msgs.AppMessage.classBuilder() as! Com.Sportorganizer.Proto.Msgs.AppMessage.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.AppMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.AppMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.AppMessage.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.AppMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.AppMessage) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasChannelId {
                jsonMap["channelId"] = channelId.toString()
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasTimestamp {
                jsonMap["timestamp"] = timestamp
            }
            if hasError {
                jsonMap["error"] = try error.encode()
            }
            if hasInitServerMessage {
                jsonMap["initServerMessage"] = try initServerMessage.encode()
            }
            if hasRegistrationRequest {
                jsonMap["registrationRequest"] = try registrationRequest.encode()
            }
            if hasRegistrationResponse {
                jsonMap["registrationResponse"] = try registrationResponse.encode()
            }
            if hasRegistrationToken {
                jsonMap["registrationToken"] = try registrationToken.encode()
            }
            if hasRegistrationConfirm {
                jsonMap["registrationConfirm"] = try registrationConfirm.encode()
            }
            if hasSignIn {
                jsonMap["signIn"] = try signIn.encode()
            }
            if hasSignInResponse {
                jsonMap["signInResponse"] = try signInResponse.encode()
            }
            if hasSimpleNotification {
                jsonMap["simpleNotification"] = try simpleNotification.encode()
            }
            if hasSimpleNotificationPush {
                jsonMap["simpleNotificationPush"] = try simpleNotificationPush.encode()
            }
            if hasSimpleSystemMessage {
                jsonMap["simpleSystemMessage"] = try simpleSystemMessage.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
            return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
            return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasChannelId) {
                output += "\(indent) channelId: \(channelId.description)\n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasTimestamp {
                output += "\(indent) timestamp: \(timestamp) \n"
            }
            if hasError {
                output += "\(indent) error {\n"
                if let outDescError = error {
                    output += try outDescError.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasInitServerMessage {
                output += "\(indent) initServerMessage {\n"
                if let outDescInitServerMessage = initServerMessage {
                    output += try outDescInitServerMessage.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasRegistrationRequest {
                output += "\(indent) registrationRequest {\n"
                if let outDescRegistrationRequest = registrationRequest {
                    output += try outDescRegistrationRequest.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasRegistrationResponse {
                output += "\(indent) registrationResponse {\n"
                if let outDescRegistrationResponse = registrationResponse {
                    output += try outDescRegistrationResponse.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasRegistrationToken {
                output += "\(indent) registrationToken {\n"
                if let outDescRegistrationToken = registrationToken {
                    output += try outDescRegistrationToken.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasRegistrationConfirm {
                output += "\(indent) registrationConfirm {\n"
                if let outDescRegistrationConfirm = registrationConfirm {
                    output += try outDescRegistrationConfirm.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSignIn {
                output += "\(indent) signIn {\n"
                if let outDescSignIn = signIn {
                    output += try outDescSignIn.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSignInResponse {
                output += "\(indent) signInResponse {\n"
                if let outDescSignInResponse = signInResponse {
                    output += try outDescSignInResponse.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSimpleNotification {
                output += "\(indent) simpleNotification {\n"
                if let outDescSimpleNotification = simpleNotification {
                    output += try outDescSimpleNotification.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSimpleNotificationPush {
                output += "\(indent) simpleNotificationPush {\n"
                if let outDescSimpleNotificationPush = simpleNotificationPush {
                    output += try outDescSimpleNotificationPush.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSimpleSystemMessage {
                output += "\(indent) simpleSystemMessage {\n"
                if let outDescSimpleSystemMessage = simpleSystemMessage {
                    output += try outDescSimpleSystemMessage.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasChannelId {
                     hashCode = (hashCode &* 31) &+ channelId.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasTimestamp {
                    hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasError {
                    if let hashValueerror = error?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueerror
                    }
                }
                if hasInitServerMessage {
                    if let hashValueinitServerMessage = initServerMessage?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueinitServerMessage
                    }
                }
                if hasRegistrationRequest {
                    if let hashValueregistrationRequest = registrationRequest?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueregistrationRequest
                    }
                }
                if hasRegistrationResponse {
                    if let hashValueregistrationResponse = registrationResponse?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueregistrationResponse
                    }
                }
                if hasRegistrationToken {
                    if let hashValueregistrationToken = registrationToken?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueregistrationToken
                    }
                }
                if hasRegistrationConfirm {
                    if let hashValueregistrationConfirm = registrationConfirm?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueregistrationConfirm
                    }
                }
                if hasSignIn {
                    if let hashValuesignIn = signIn?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuesignIn
                    }
                }
                if hasSignInResponse {
                    if let hashValuesignInResponse = signInResponse?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuesignInResponse
                    }
                }
                if hasSimpleNotification {
                    if let hashValuesimpleNotification = simpleNotification?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuesimpleNotification
                    }
                }
                if hasSimpleNotificationPush {
                    if let hashValuesimpleNotificationPush = simpleNotificationPush?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuesimpleNotificationPush
                    }
                }
                if hasSimpleSystemMessage {
                    if let hashValuesimpleSystemMessage = simpleSystemMessage?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuesimpleSystemMessage
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.AppMessage"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.AppMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.AppMessage = Com.Sportorganizer.Proto.Msgs.AppMessage()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.AppMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///required fields
                public var channelId:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel {
                    get {
                        return builderResult.channelId
                    }
                    set (value) {
                        builderResult.hasChannelId = true
                        builderResult.channelId = value
                    }
                }
                public var hasChannelId:Bool{
                    get {
                        return builderResult.hasChannelId
                    }
                }
            @discardableResult
                public func setChannelId(_ value:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                  self.channelId = value
                  return self
                }
            @discardableResult
                public func clearChannelId() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                   builderResult.hasChannelId = false
                   builderResult.channelId = .normal
                   return self
                }
                public var type:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                   builderResult.hasType = false
                   builderResult.type = .error
                   return self
                }
                public var status:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .ok
                   return self
                }
            ///time-stamps
            public var timestamp:String {
                get {
                    return builderResult.timestamp
                }
                set (value) {
                    builderResult.hasTimestamp = true
                    builderResult.timestamp = value
                }
            }
            public var hasTimestamp:Bool {
                get {
                    return builderResult.hasTimestamp
                }
            }
            @discardableResult
            public func setTimestamp(_ value:String) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.timestamp = value
                return self
            }
            @discardableResult
            public func clearTimestamp() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder{
                builderResult.hasTimestamp = false
                builderResult.timestamp = ""
                return self
            }
            ///error
            public var error:Com.Sportorganizer.Proto.Msgs.SysError! {
                get {
                    if errorBuilder_ != nil {
                        builderResult.error = errorBuilder_.getMessage()
                    }
                    return builderResult.error
                }
                set (value) {
                    builderResult.hasError = true
                    builderResult.error = value
                }
            }
            public var hasError:Bool {
                get {
                    return builderResult.hasError
                }
            }
            fileprivate var errorBuilder_:Com.Sportorganizer.Proto.Msgs.SysError.Builder! {
                didSet {
                    builderResult.hasError = true
                }
            }
            public func getErrorBuilder() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                if errorBuilder_ == nil {
                    errorBuilder_ = Com.Sportorganizer.Proto.Msgs.SysError.Builder()
                    builderResult.error = errorBuilder_.getMessage()
                    if error != nil {
                        try! errorBuilder_.mergeFrom(other: error)
                    }
                }
                return errorBuilder_
            }
            @discardableResult
            public func setError(_ value:Com.Sportorganizer.Proto.Msgs.SysError!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.error = value
                return self
            }
            @discardableResult
            public func mergeError(value:Com.Sportorganizer.Proto.Msgs.SysError) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasError {
                    builderResult.error = try Com.Sportorganizer.Proto.Msgs.SysError.builderWithPrototype(prototype:builderResult.error).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.error = value
                }
                builderResult.hasError = true
                return self
            }
            @discardableResult
            public func clearError() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                errorBuilder_ = nil
                builderResult.hasError = false
                builderResult.error = nil
                return self
            }
            public var initServerMessage:Com.Sportorganizer.Proto.Msgs.InitialServerMessage! {
                get {
                    if initServerMessageBuilder_ != nil {
                        builderResult.initServerMessage = initServerMessageBuilder_.getMessage()
                    }
                    return builderResult.initServerMessage
                }
                set (value) {
                    builderResult.hasInitServerMessage = true
                    builderResult.initServerMessage = value
                }
            }
            public var hasInitServerMessage:Bool {
                get {
                    return builderResult.hasInitServerMessage
                }
            }
            fileprivate var initServerMessageBuilder_:Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder! {
                didSet {
                    builderResult.hasInitServerMessage = true
                }
            }
            public func getInitServerMessageBuilder() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                if initServerMessageBuilder_ == nil {
                    initServerMessageBuilder_ = Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder()
                    builderResult.initServerMessage = initServerMessageBuilder_.getMessage()
                    if initServerMessage != nil {
                        try! initServerMessageBuilder_.mergeFrom(other: initServerMessage)
                    }
                }
                return initServerMessageBuilder_
            }
            @discardableResult
            public func setInitServerMessage(_ value:Com.Sportorganizer.Proto.Msgs.InitialServerMessage!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.initServerMessage = value
                return self
            }
            @discardableResult
            public func mergeInitServerMessage(value:Com.Sportorganizer.Proto.Msgs.InitialServerMessage) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasInitServerMessage {
                    builderResult.initServerMessage = try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.builderWithPrototype(prototype:builderResult.initServerMessage).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.initServerMessage = value
                }
                builderResult.hasInitServerMessage = true
                return self
            }
            @discardableResult
            public func clearInitServerMessage() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                initServerMessageBuilder_ = nil
                builderResult.hasInitServerMessage = false
                builderResult.initServerMessage = nil
                return self
            }
            public var registrationRequest:Com.Sportorganizer.Proto.Msgs.RegistrationRequest! {
                get {
                    if registrationRequestBuilder_ != nil {
                        builderResult.registrationRequest = registrationRequestBuilder_.getMessage()
                    }
                    return builderResult.registrationRequest
                }
                set (value) {
                    builderResult.hasRegistrationRequest = true
                    builderResult.registrationRequest = value
                }
            }
            public var hasRegistrationRequest:Bool {
                get {
                    return builderResult.hasRegistrationRequest
                }
            }
            fileprivate var registrationRequestBuilder_:Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder! {
                didSet {
                    builderResult.hasRegistrationRequest = true
                }
            }
            public func getRegistrationRequestBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                if registrationRequestBuilder_ == nil {
                    registrationRequestBuilder_ = Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder()
                    builderResult.registrationRequest = registrationRequestBuilder_.getMessage()
                    if registrationRequest != nil {
                        try! registrationRequestBuilder_.mergeFrom(other: registrationRequest)
                    }
                }
                return registrationRequestBuilder_
            }
            @discardableResult
            public func setRegistrationRequest(_ value:Com.Sportorganizer.Proto.Msgs.RegistrationRequest!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.registrationRequest = value
                return self
            }
            @discardableResult
            public func mergeRegistrationRequest(value:Com.Sportorganizer.Proto.Msgs.RegistrationRequest) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasRegistrationRequest {
                    builderResult.registrationRequest = try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.builderWithPrototype(prototype:builderResult.registrationRequest).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.registrationRequest = value
                }
                builderResult.hasRegistrationRequest = true
                return self
            }
            @discardableResult
            public func clearRegistrationRequest() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                registrationRequestBuilder_ = nil
                builderResult.hasRegistrationRequest = false
                builderResult.registrationRequest = nil
                return self
            }
            public var registrationResponse:Com.Sportorganizer.Proto.Msgs.RegistrationResponse! {
                get {
                    if registrationResponseBuilder_ != nil {
                        builderResult.registrationResponse = registrationResponseBuilder_.getMessage()
                    }
                    return builderResult.registrationResponse
                }
                set (value) {
                    builderResult.hasRegistrationResponse = true
                    builderResult.registrationResponse = value
                }
            }
            public var hasRegistrationResponse:Bool {
                get {
                    return builderResult.hasRegistrationResponse
                }
            }
            fileprivate var registrationResponseBuilder_:Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder! {
                didSet {
                    builderResult.hasRegistrationResponse = true
                }
            }
            public func getRegistrationResponseBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                if registrationResponseBuilder_ == nil {
                    registrationResponseBuilder_ = Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder()
                    builderResult.registrationResponse = registrationResponseBuilder_.getMessage()
                    if registrationResponse != nil {
                        try! registrationResponseBuilder_.mergeFrom(other: registrationResponse)
                    }
                }
                return registrationResponseBuilder_
            }
            @discardableResult
            public func setRegistrationResponse(_ value:Com.Sportorganizer.Proto.Msgs.RegistrationResponse!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.registrationResponse = value
                return self
            }
            @discardableResult
            public func mergeRegistrationResponse(value:Com.Sportorganizer.Proto.Msgs.RegistrationResponse) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasRegistrationResponse {
                    builderResult.registrationResponse = try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.builderWithPrototype(prototype:builderResult.registrationResponse).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.registrationResponse = value
                }
                builderResult.hasRegistrationResponse = true
                return self
            }
            @discardableResult
            public func clearRegistrationResponse() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                registrationResponseBuilder_ = nil
                builderResult.hasRegistrationResponse = false
                builderResult.registrationResponse = nil
                return self
            }
            public var registrationToken:Com.Sportorganizer.Proto.Msgs.RegistrationToken! {
                get {
                    if registrationTokenBuilder_ != nil {
                        builderResult.registrationToken = registrationTokenBuilder_.getMessage()
                    }
                    return builderResult.registrationToken
                }
                set (value) {
                    builderResult.hasRegistrationToken = true
                    builderResult.registrationToken = value
                }
            }
            public var hasRegistrationToken:Bool {
                get {
                    return builderResult.hasRegistrationToken
                }
            }
            fileprivate var registrationTokenBuilder_:Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder! {
                didSet {
                    builderResult.hasRegistrationToken = true
                }
            }
            public func getRegistrationTokenBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                if registrationTokenBuilder_ == nil {
                    registrationTokenBuilder_ = Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder()
                    builderResult.registrationToken = registrationTokenBuilder_.getMessage()
                    if registrationToken != nil {
                        try! registrationTokenBuilder_.mergeFrom(other: registrationToken)
                    }
                }
                return registrationTokenBuilder_
            }
            @discardableResult
            public func setRegistrationToken(_ value:Com.Sportorganizer.Proto.Msgs.RegistrationToken!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.registrationToken = value
                return self
            }
            @discardableResult
            public func mergeRegistrationToken(value:Com.Sportorganizer.Proto.Msgs.RegistrationToken) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasRegistrationToken {
                    builderResult.registrationToken = try Com.Sportorganizer.Proto.Msgs.RegistrationToken.builderWithPrototype(prototype:builderResult.registrationToken).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.registrationToken = value
                }
                builderResult.hasRegistrationToken = true
                return self
            }
            @discardableResult
            public func clearRegistrationToken() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                registrationTokenBuilder_ = nil
                builderResult.hasRegistrationToken = false
                builderResult.registrationToken = nil
                return self
            }
            public var registrationConfirm:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm! {
                get {
                    if registrationConfirmBuilder_ != nil {
                        builderResult.registrationConfirm = registrationConfirmBuilder_.getMessage()
                    }
                    return builderResult.registrationConfirm
                }
                set (value) {
                    builderResult.hasRegistrationConfirm = true
                    builderResult.registrationConfirm = value
                }
            }
            public var hasRegistrationConfirm:Bool {
                get {
                    return builderResult.hasRegistrationConfirm
                }
            }
            fileprivate var registrationConfirmBuilder_:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder! {
                didSet {
                    builderResult.hasRegistrationConfirm = true
                }
            }
            public func getRegistrationConfirmBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                if registrationConfirmBuilder_ == nil {
                    registrationConfirmBuilder_ = Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder()
                    builderResult.registrationConfirm = registrationConfirmBuilder_.getMessage()
                    if registrationConfirm != nil {
                        try! registrationConfirmBuilder_.mergeFrom(other: registrationConfirm)
                    }
                }
                return registrationConfirmBuilder_
            }
            @discardableResult
            public func setRegistrationConfirm(_ value:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.registrationConfirm = value
                return self
            }
            @discardableResult
            public func mergeRegistrationConfirm(value:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasRegistrationConfirm {
                    builderResult.registrationConfirm = try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.builderWithPrototype(prototype:builderResult.registrationConfirm).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.registrationConfirm = value
                }
                builderResult.hasRegistrationConfirm = true
                return self
            }
            @discardableResult
            public func clearRegistrationConfirm() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                registrationConfirmBuilder_ = nil
                builderResult.hasRegistrationConfirm = false
                builderResult.registrationConfirm = nil
                return self
            }
            public var signIn:Com.Sportorganizer.Proto.Msgs.SignInRequest! {
                get {
                    if signInBuilder_ != nil {
                        builderResult.signIn = signInBuilder_.getMessage()
                    }
                    return builderResult.signIn
                }
                set (value) {
                    builderResult.hasSignIn = true
                    builderResult.signIn = value
                }
            }
            public var hasSignIn:Bool {
                get {
                    return builderResult.hasSignIn
                }
            }
            fileprivate var signInBuilder_:Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder! {
                didSet {
                    builderResult.hasSignIn = true
                }
            }
            public func getSignInBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                if signInBuilder_ == nil {
                    signInBuilder_ = Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder()
                    builderResult.signIn = signInBuilder_.getMessage()
                    if signIn != nil {
                        try! signInBuilder_.mergeFrom(other: signIn)
                    }
                }
                return signInBuilder_
            }
            @discardableResult
            public func setSignIn(_ value:Com.Sportorganizer.Proto.Msgs.SignInRequest!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.signIn = value
                return self
            }
            @discardableResult
            public func mergeSignIn(value:Com.Sportorganizer.Proto.Msgs.SignInRequest) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasSignIn {
                    builderResult.signIn = try Com.Sportorganizer.Proto.Msgs.SignInRequest.builderWithPrototype(prototype:builderResult.signIn).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.signIn = value
                }
                builderResult.hasSignIn = true
                return self
            }
            @discardableResult
            public func clearSignIn() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                signInBuilder_ = nil
                builderResult.hasSignIn = false
                builderResult.signIn = nil
                return self
            }
            public var signInResponse:Com.Sportorganizer.Proto.Msgs.SignInResponse! {
                get {
                    if signInResponseBuilder_ != nil {
                        builderResult.signInResponse = signInResponseBuilder_.getMessage()
                    }
                    return builderResult.signInResponse
                }
                set (value) {
                    builderResult.hasSignInResponse = true
                    builderResult.signInResponse = value
                }
            }
            public var hasSignInResponse:Bool {
                get {
                    return builderResult.hasSignInResponse
                }
            }
            fileprivate var signInResponseBuilder_:Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder! {
                didSet {
                    builderResult.hasSignInResponse = true
                }
            }
            public func getSignInResponseBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                if signInResponseBuilder_ == nil {
                    signInResponseBuilder_ = Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder()
                    builderResult.signInResponse = signInResponseBuilder_.getMessage()
                    if signInResponse != nil {
                        try! signInResponseBuilder_.mergeFrom(other: signInResponse)
                    }
                }
                return signInResponseBuilder_
            }
            @discardableResult
            public func setSignInResponse(_ value:Com.Sportorganizer.Proto.Msgs.SignInResponse!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.signInResponse = value
                return self
            }
            @discardableResult
            public func mergeSignInResponse(value:Com.Sportorganizer.Proto.Msgs.SignInResponse) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasSignInResponse {
                    builderResult.signInResponse = try Com.Sportorganizer.Proto.Msgs.SignInResponse.builderWithPrototype(prototype:builderResult.signInResponse).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.signInResponse = value
                }
                builderResult.hasSignInResponse = true
                return self
            }
            @discardableResult
            public func clearSignInResponse() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                signInResponseBuilder_ = nil
                builderResult.hasSignInResponse = false
                builderResult.signInResponse = nil
                return self
            }
            public var simpleNotification:Com.Sportorganizer.Proto.Msgs.SimpleNotification! {
                get {
                    if simpleNotificationBuilder_ != nil {
                        builderResult.simpleNotification = simpleNotificationBuilder_.getMessage()
                    }
                    return builderResult.simpleNotification
                }
                set (value) {
                    builderResult.hasSimpleNotification = true
                    builderResult.simpleNotification = value
                }
            }
            public var hasSimpleNotification:Bool {
                get {
                    return builderResult.hasSimpleNotification
                }
            }
            fileprivate var simpleNotificationBuilder_:Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder! {
                didSet {
                    builderResult.hasSimpleNotification = true
                }
            }
            public func getSimpleNotificationBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                if simpleNotificationBuilder_ == nil {
                    simpleNotificationBuilder_ = Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder()
                    builderResult.simpleNotification = simpleNotificationBuilder_.getMessage()
                    if simpleNotification != nil {
                        try! simpleNotificationBuilder_.mergeFrom(other: simpleNotification)
                    }
                }
                return simpleNotificationBuilder_
            }
            @discardableResult
            public func setSimpleNotification(_ value:Com.Sportorganizer.Proto.Msgs.SimpleNotification!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.simpleNotification = value
                return self
            }
            @discardableResult
            public func mergeSimpleNotification(value:Com.Sportorganizer.Proto.Msgs.SimpleNotification) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasSimpleNotification {
                    builderResult.simpleNotification = try Com.Sportorganizer.Proto.Msgs.SimpleNotification.builderWithPrototype(prototype:builderResult.simpleNotification).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.simpleNotification = value
                }
                builderResult.hasSimpleNotification = true
                return self
            }
            @discardableResult
            public func clearSimpleNotification() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                simpleNotificationBuilder_ = nil
                builderResult.hasSimpleNotification = false
                builderResult.simpleNotification = nil
                return self
            }
            /// this is workaround for push messages
            public var simpleNotificationPush:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush! {
                get {
                    if simpleNotificationPushBuilder_ != nil {
                        builderResult.simpleNotificationPush = simpleNotificationPushBuilder_.getMessage()
                    }
                    return builderResult.simpleNotificationPush
                }
                set (value) {
                    builderResult.hasSimpleNotificationPush = true
                    builderResult.simpleNotificationPush = value
                }
            }
            public var hasSimpleNotificationPush:Bool {
                get {
                    return builderResult.hasSimpleNotificationPush
                }
            }
            fileprivate var simpleNotificationPushBuilder_:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder! {
                didSet {
                    builderResult.hasSimpleNotificationPush = true
                }
            }
            public func getSimpleNotificationPushBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                if simpleNotificationPushBuilder_ == nil {
                    simpleNotificationPushBuilder_ = Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder()
                    builderResult.simpleNotificationPush = simpleNotificationPushBuilder_.getMessage()
                    if simpleNotificationPush != nil {
                        try! simpleNotificationPushBuilder_.mergeFrom(other: simpleNotificationPush)
                    }
                }
                return simpleNotificationPushBuilder_
            }
            @discardableResult
            public func setSimpleNotificationPush(_ value:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.simpleNotificationPush = value
                return self
            }
            @discardableResult
            public func mergeSimpleNotificationPush(value:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasSimpleNotificationPush {
                    builderResult.simpleNotificationPush = try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.builderWithPrototype(prototype:builderResult.simpleNotificationPush).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.simpleNotificationPush = value
                }
                builderResult.hasSimpleNotificationPush = true
                return self
            }
            @discardableResult
            public func clearSimpleNotificationPush() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                simpleNotificationPushBuilder_ = nil
                builderResult.hasSimpleNotificationPush = false
                builderResult.simpleNotificationPush = nil
                return self
            }
            public var simpleSystemMessage:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage! {
                get {
                    if simpleSystemMessageBuilder_ != nil {
                        builderResult.simpleSystemMessage = simpleSystemMessageBuilder_.getMessage()
                    }
                    return builderResult.simpleSystemMessage
                }
                set (value) {
                    builderResult.hasSimpleSystemMessage = true
                    builderResult.simpleSystemMessage = value
                }
            }
            public var hasSimpleSystemMessage:Bool {
                get {
                    return builderResult.hasSimpleSystemMessage
                }
            }
            fileprivate var simpleSystemMessageBuilder_:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder! {
                didSet {
                    builderResult.hasSimpleSystemMessage = true
                }
            }
            public func getSimpleSystemMessageBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                if simpleSystemMessageBuilder_ == nil {
                    simpleSystemMessageBuilder_ = Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder()
                    builderResult.simpleSystemMessage = simpleSystemMessageBuilder_.getMessage()
                    if simpleSystemMessage != nil {
                        try! simpleSystemMessageBuilder_.mergeFrom(other: simpleSystemMessage)
                    }
                }
                return simpleSystemMessageBuilder_
            }
            @discardableResult
            public func setSimpleSystemMessage(_ value:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage!) -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                self.simpleSystemMessage = value
                return self
            }
            @discardableResult
            public func mergeSimpleSystemMessage(value:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if builderResult.hasSimpleSystemMessage {
                    builderResult.simpleSystemMessage = try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.builderWithPrototype(prototype:builderResult.simpleSystemMessage).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.simpleSystemMessage = value
                }
                builderResult.hasSimpleSystemMessage = true
                return self
            }
            @discardableResult
            public func clearSimpleSystemMessage() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                simpleSystemMessageBuilder_ = nil
                builderResult.hasSimpleSystemMessage = false
                builderResult.simpleSystemMessage = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.AppMessage()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                return try Com.Sportorganizer.Proto.Msgs.AppMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.AppMessage {
                let returnMe:Com.Sportorganizer.Proto.Msgs.AppMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.AppMessage) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.AppMessage() {
                    return self
                }
                if other.hasChannelId {
                    channelId = other.channelId
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasTimestamp {
                    timestamp = other.timestamp
                }
                if (other.hasError) {
                    try mergeError(value: other.error)
                }
                if (other.hasInitServerMessage) {
                    try mergeInitServerMessage(value: other.initServerMessage)
                }
                if (other.hasRegistrationRequest) {
                    try mergeRegistrationRequest(value: other.registrationRequest)
                }
                if (other.hasRegistrationResponse) {
                    try mergeRegistrationResponse(value: other.registrationResponse)
                }
                if (other.hasRegistrationToken) {
                    try mergeRegistrationToken(value: other.registrationToken)
                }
                if (other.hasRegistrationConfirm) {
                    try mergeRegistrationConfirm(value: other.registrationConfirm)
                }
                if (other.hasSignIn) {
                    try mergeSignIn(value: other.signIn)
                }
                if (other.hasSignInResponse) {
                    try mergeSignInResponse(value: other.signInResponse)
                }
                if (other.hasSimpleNotification) {
                    try mergeSimpleNotification(value: other.simpleNotification)
                }
                if (other.hasSimpleNotificationPush) {
                    try mergeSimpleNotificationPush(value: other.simpleNotificationPush)
                }
                if (other.hasSimpleSystemMessage) {
                    try mergeSimpleSystemMessage(value: other.simpleSystemMessage)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntchannelId = try codedInputStream.readEnum()
                        if let enumschannelId = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel(rawValue:valueIntchannelId){
                            channelId = enumschannelId
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntchannelId))
                        }

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    case 24:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntstatus))
                        }

                    case 34:
                        timestamp = try codedInputStream.readString()

                    case 42:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SysError.Builder = Com.Sportorganizer.Proto.Msgs.SysError.Builder()
                        if hasError {
                            try subBuilder.mergeFrom(other: error)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        error = subBuilder.buildPartial()

                    case 50:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder = Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder()
                        if hasInitServerMessage {
                            try subBuilder.mergeFrom(other: initServerMessage)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        initServerMessage = subBuilder.buildPartial()

                    case 58:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder = Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder()
                        if hasRegistrationRequest {
                            try subBuilder.mergeFrom(other: registrationRequest)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        registrationRequest = subBuilder.buildPartial()

                    case 66:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder = Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder()
                        if hasRegistrationResponse {
                            try subBuilder.mergeFrom(other: registrationResponse)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        registrationResponse = subBuilder.buildPartial()

                    case 74:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder = Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder()
                        if hasRegistrationToken {
                            try subBuilder.mergeFrom(other: registrationToken)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        registrationToken = subBuilder.buildPartial()

                    case 82:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder = Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder()
                        if hasRegistrationConfirm {
                            try subBuilder.mergeFrom(other: registrationConfirm)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        registrationConfirm = subBuilder.buildPartial()

                    case 90:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder = Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder()
                        if hasSignIn {
                            try subBuilder.mergeFrom(other: signIn)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        signIn = subBuilder.buildPartial()

                    case 98:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder = Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder()
                        if hasSignInResponse {
                            try subBuilder.mergeFrom(other: signInResponse)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        signInResponse = subBuilder.buildPartial()

                    case 106:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder = Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder()
                        if hasSimpleNotification {
                            try subBuilder.mergeFrom(other: simpleNotification)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        simpleNotification = subBuilder.buildPartial()

                    case 114:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder = Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder()
                        if hasSimpleNotificationPush {
                            try subBuilder.mergeFrom(other: simpleNotificationPush)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        simpleNotificationPush = subBuilder.buildPartial()

                    case 122:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder = Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder()
                        if hasSimpleSystemMessage {
                            try subBuilder.mergeFrom(other: simpleSystemMessage)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        simpleSystemMessage = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.AppMessage.Builder()
                if let jsonValueChannelId = jsonMap["channelId"] as? String {
                    resultDecodedBuilder.channelId = try Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel.fromString(str: jsonValueChannelId)
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType.fromString(str: jsonValueType)
                }
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
                    resultDecodedBuilder.timestamp = jsonValueTimestamp
                }
                if let jsonValueError = jsonMap["error"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.error = try Com.Sportorganizer.Proto.Msgs.SysError.Builder.decodeToBuilder(jsonMap:jsonValueError).build()

                }
                if let jsonValueInitServerMessage = jsonMap["initServerMessage"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.initServerMessage = try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder.decodeToBuilder(jsonMap:jsonValueInitServerMessage).build()

                }
                if let jsonValueRegistrationRequest = jsonMap["registrationRequest"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.registrationRequest = try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder.decodeToBuilder(jsonMap:jsonValueRegistrationRequest).build()

                }
                if let jsonValueRegistrationResponse = jsonMap["registrationResponse"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.registrationResponse = try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder.decodeToBuilder(jsonMap:jsonValueRegistrationResponse).build()

                }
                if let jsonValueRegistrationToken = jsonMap["registrationToken"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.registrationToken = try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder.decodeToBuilder(jsonMap:jsonValueRegistrationToken).build()

                }
                if let jsonValueRegistrationConfirm = jsonMap["registrationConfirm"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.registrationConfirm = try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder.decodeToBuilder(jsonMap:jsonValueRegistrationConfirm).build()

                }
                if let jsonValueSignIn = jsonMap["signIn"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.signIn = try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder.decodeToBuilder(jsonMap:jsonValueSignIn).build()

                }
                if let jsonValueSignInResponse = jsonMap["signInResponse"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.signInResponse = try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder.decodeToBuilder(jsonMap:jsonValueSignInResponse).build()

                }
                if let jsonValueSimpleNotification = jsonMap["simpleNotification"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.simpleNotification = try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder.decodeToBuilder(jsonMap:jsonValueSimpleNotification).build()

                }
                if let jsonValueSimpleNotificationPush = jsonMap["simpleNotificationPush"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.simpleNotificationPush = try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder.decodeToBuilder(jsonMap:jsonValueSimpleNotificationPush).build()

                }
                if let jsonValueSimpleSystemMessage = jsonMap["simpleSystemMessage"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.simpleSystemMessage = try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder.decodeToBuilder(jsonMap:jsonValueSimpleSystemMessage).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Error : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.Error, rhs: Com.Sportorganizer.Proto.Msgs.Error) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = fieldCheck && (lhs.hasArguments == rhs.hasArguments) && (!lhs.hasArguments || lhs.arguments == rhs.arguments)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var type:Com.Sportorganizer.Proto.Msgs.ErrorType = Com.Sportorganizer.Proto.Msgs.ErrorType.system
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var id:Int32 = Int32(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var value:String = ""
        public fileprivate(set) var hasValue:Bool = false

        public fileprivate(set) var arguments:String = ""
        public fileprivate(set) var hasArguments:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
            }
            if hasId {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:id)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 3, value:name)
            }
            if hasValue {
                try codedOutputStream.writeString(fieldNumber: 4, value:value)
            }
            if hasArguments {
                try codedOutputStream.writeString(fieldNumber: 5, value:arguments)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasId {
                serialize_size += id.computeInt32Size(fieldNumber: 2)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 3)
            }
            if hasValue {
                serialize_size += value.computeStringSize(fieldNumber: 4)
            }
            if hasArguments {
                serialize_size += arguments.computeStringSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
            return Com.Sportorganizer.Proto.Msgs.Error.classBuilder() as! Com.Sportorganizer.Proto.Msgs.Error.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.Error.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.Error.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.Error.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
            return try Com.Sportorganizer.Proto.Msgs.Error.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.Error) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
            return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasId {
                jsonMap["id"] = Int(id)
            }
            if hasName {
                jsonMap["name"] = name
            }
            if hasValue {
                jsonMap["value"] = value
            }
            if hasArguments {
                jsonMap["arguments"] = arguments
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.Error {
            return try Com.Sportorganizer.Proto.Msgs.Error.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.Error {
            return try Com.Sportorganizer.Proto.Msgs.Error.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            if hasArguments {
                output += "\(indent) arguments: \(arguments) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                if hasArguments {
                    hashCode = (hashCode &* 31) &+ arguments.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.Error"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.Error"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.Error = Com.Sportorganizer.Proto.Msgs.Error()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.Error {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var type:Com.Sportorganizer.Proto.Msgs.ErrorType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Com.Sportorganizer.Proto.Msgs.ErrorType) -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                   builderResult.hasType = false
                   builderResult.type = .system
                   return self
                }
            public var id:Int32 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int32) -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Com.Sportorganizer.Proto.Msgs.Error.Builder{
                builderResult.hasId = false
                builderResult.id = Int32(0)
                return self
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Com.Sportorganizer.Proto.Msgs.Error.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            public var value:String {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:String) -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Com.Sportorganizer.Proto.Msgs.Error.Builder{
                builderResult.hasValue = false
                builderResult.value = ""
                return self
            }
            public var arguments:String {
                get {
                    return builderResult.arguments
                }
                set (value) {
                    builderResult.hasArguments = true
                    builderResult.arguments = value
                }
            }
            public var hasArguments:Bool {
                get {
                    return builderResult.hasArguments
                }
            }
            @discardableResult
            public func setArguments(_ value:String) -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                self.arguments = value
                return self
            }
            @discardableResult
            public func clearArguments() -> Com.Sportorganizer.Proto.Msgs.Error.Builder{
                builderResult.hasArguments = false
                builderResult.arguments = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.Error()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                return try Com.Sportorganizer.Proto.Msgs.Error.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.Error {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.Error {
                let returnMe:Com.Sportorganizer.Proto.Msgs.Error = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.Error) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.Error() {
                    return self
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasValue {
                    value = other.value
                }
                if other.hasArguments {
                    arguments = other.arguments
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Com.Sportorganizer.Proto.Msgs.ErrorType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                        }

                    case 16:
                        id = try codedInputStream.readInt32()

                    case 26:
                        name = try codedInputStream.readString()

                    case 34:
                        value = try codedInputStream.readString()

                    case 42:
                        arguments = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.Error.Builder()
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Com.Sportorganizer.Proto.Msgs.ErrorType.fromString(str: jsonValueType)
                }
                if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int32(jsonValueId)
                } else if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int32(jsonValueId)!
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = jsonValueValue
                }
                if let jsonValueArguments = jsonMap["arguments"] as? String {
                    resultDecodedBuilder.arguments = jsonValueArguments
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.Error.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.Error.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SysError : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SysError, rhs: Com.Sportorganizer.Proto.Msgs.SysError) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.errors == rhs.errors)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Int32 = Int32(0)
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var errors:Array<Com.Sportorganizer.Proto.Msgs.Error>  = Array<Com.Sportorganizer.Proto.Msgs.Error>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:id)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 2, value:name)
            }
            for oneElementErrors in errors {
                  try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementErrors)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeInt32Size(fieldNumber: 1)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 2)
            }
            for oneElementErrors in errors {
                serialize_size += oneElementErrors.computeMessageSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
            return Com.Sportorganizer.Proto.Msgs.SysError.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SysError.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SysError.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SysError.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SysError.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SysError.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SysError) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = Int(id)
            }
            if hasName {
                jsonMap["name"] = name
            }
            if !errors.isEmpty {
                var jsonArrayErrors:Array<Dictionary<String,Any>> = []
                for oneValueErrors in errors {
                    let ecodedMessageErrors = try oneValueErrors.encode()
                    jsonArrayErrors.append(ecodedMessageErrors)
                }
                jsonMap["errors"] = jsonArrayErrors
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
            return try Com.Sportorganizer.Proto.Msgs.SysError.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
            return try Com.Sportorganizer.Proto.Msgs.SysError.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            var errorsElementIndex:Int = 0
            for oneElementErrors in errors {
                output += "\(indent) errors[\(errorsElementIndex)] {\n"
                output += try oneElementErrors.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                errorsElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                for oneElementErrors in errors {
                    hashCode = (hashCode &* 31) &+ oneElementErrors.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SysError"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SysError"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SysError = Com.Sportorganizer.Proto.Msgs.SysError()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SysError {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Int32 {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:Int32) -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder{
                builderResult.hasId = false
                builderResult.id = Int32(0)
                return self
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            public var errors:Array<Com.Sportorganizer.Proto.Msgs.Error> {
                get {
                    return builderResult.errors
                }
                set (value) {
                    builderResult.errors = value
                }
            }
            @discardableResult
            public func setErrors(_ value:Array<Com.Sportorganizer.Proto.Msgs.Error>) -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                self.errors = value
                return self
            }
            @discardableResult
            public func clearErrors() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                builderResult.errors.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SysError()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SysError.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SysError {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SysError {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SysError = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SysError) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SysError() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasName {
                    name = other.name
                }
                if !other.errors.isEmpty  {
                     builderResult.errors += other.errors
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        id = try codedInputStream.readInt32()

                    case 18:
                        name = try codedInputStream.readString()

                    case 26:
                        let subBuilder = Com.Sportorganizer.Proto.Msgs.Error.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        errors.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SysError.Builder()
                if let jsonValueId = jsonMap["id"] as? Int {
                    resultDecodedBuilder.id = Int32(jsonValueId)
                } else if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = Int32(jsonValueId)!
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueErrors = jsonMap["errors"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayErrors:Array<Com.Sportorganizer.Proto.Msgs.Error> = []
                    for oneValueErrors in jsonValueErrors {
                        let messageFromStringErrors = try Com.Sportorganizer.Proto.Msgs.Error.Builder.decodeToBuilder(jsonMap:oneValueErrors).build()

                        jsonArrayErrors.append(messageFromStringErrors)
                    }
                    resultDecodedBuilder.errors = jsonArrayErrors
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SysError.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SysError.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class InitialServerMessage : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.InitialServerMessage, rhs: Com.Sportorganizer.Proto.Msgs.InitialServerMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasServerOk == rhs.hasServerOk) && (!lhs.hasServerOk || lhs.serverOk == rhs.serverOk)
            fieldCheck = fieldCheck && (lhs.hasAdditionalInfo == rhs.hasAdditionalInfo) && (!lhs.hasAdditionalInfo || lhs.additionalInfo == rhs.additionalInfo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var serverOk:Bool = false
        public fileprivate(set) var hasServerOk:Bool = false

        public fileprivate(set) var additionalInfo:String = ""
        public fileprivate(set) var hasAdditionalInfo:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasServerOk {
                try codedOutputStream.writeBool(fieldNumber: 1, value:serverOk)
            }
            if hasAdditionalInfo {
                try codedOutputStream.writeString(fieldNumber: 2, value:additionalInfo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasServerOk {
                serialize_size += serverOk.computeBoolSize(fieldNumber: 1)
            }
            if hasAdditionalInfo {
                serialize_size += additionalInfo.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
            return Com.Sportorganizer.Proto.Msgs.InitialServerMessage.classBuilder() as! Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.InitialServerMessage) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasServerOk {
                jsonMap["serverOk"] = serverOk
            }
            if hasAdditionalInfo {
                jsonMap["additionalInfo"] = additionalInfo
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
            return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
            return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasServerOk {
                output += "\(indent) serverOk: \(serverOk) \n"
            }
            if hasAdditionalInfo {
                output += "\(indent) additionalInfo: \(additionalInfo) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasServerOk {
                    hashCode = (hashCode &* 31) &+ serverOk.hashValue
                }
                if hasAdditionalInfo {
                    hashCode = (hashCode &* 31) &+ additionalInfo.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.InitialServerMessage"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.InitialServerMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.InitialServerMessage = Com.Sportorganizer.Proto.Msgs.InitialServerMessage()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var serverOk:Bool {
                get {
                    return builderResult.serverOk
                }
                set (value) {
                    builderResult.hasServerOk = true
                    builderResult.serverOk = value
                }
            }
            public var hasServerOk:Bool {
                get {
                    return builderResult.hasServerOk
                }
            }
            @discardableResult
            public func setServerOk(_ value:Bool) -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                self.serverOk = value
                return self
            }
            @discardableResult
            public func clearServerOk() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder{
                builderResult.hasServerOk = false
                builderResult.serverOk = false
                return self
            }
            public var additionalInfo:String {
                get {
                    return builderResult.additionalInfo
                }
                set (value) {
                    builderResult.hasAdditionalInfo = true
                    builderResult.additionalInfo = value
                }
            }
            public var hasAdditionalInfo:Bool {
                get {
                    return builderResult.hasAdditionalInfo
                }
            }
            @discardableResult
            public func setAdditionalInfo(_ value:String) -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                self.additionalInfo = value
                return self
            }
            @discardableResult
            public func clearAdditionalInfo() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder{
                builderResult.hasAdditionalInfo = false
                builderResult.additionalInfo = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.InitialServerMessage()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
                let returnMe:Com.Sportorganizer.Proto.Msgs.InitialServerMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.InitialServerMessage) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.InitialServerMessage() {
                    return self
                }
                if other.hasServerOk {
                    serverOk = other.serverOk
                }
                if other.hasAdditionalInfo {
                    additionalInfo = other.additionalInfo
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        serverOk = try codedInputStream.readBool()

                    case 18:
                        additionalInfo = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder()
                if let jsonValueServerOk = jsonMap["serverOk"] as? Bool {
                    resultDecodedBuilder.serverOk = jsonValueServerOk
                }
                if let jsonValueAdditionalInfo = jsonMap["additionalInfo"] as? String {
                    resultDecodedBuilder.additionalInfo = jsonValueAdditionalInfo
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RegistrationRequest : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.RegistrationRequest, rhs: Com.Sportorganizer.Proto.Msgs.RegistrationRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
            fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
            fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
            fieldCheck = fieldCheck && (lhs.hasAlreadyRegistred == rhs.hasAlreadyRegistred) && (!lhs.hasAlreadyRegistred || lhs.alreadyRegistred == rhs.alreadyRegistred)
            fieldCheck = fieldCheck && (lhs.hasDeviceInfo == rhs.hasDeviceInfo) && (!lhs.hasDeviceInfo || lhs.deviceInfo == rhs.deviceInfo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phoneNumber:String = ""
        public fileprivate(set) var hasPhoneNumber:Bool = false

        public fileprivate(set) var username:String = ""
        public fileprivate(set) var hasUsername:Bool = false

        public fileprivate(set) var firstName:String = ""
        public fileprivate(set) var hasFirstName:Bool = false

        public fileprivate(set) var lastName:String = ""
        public fileprivate(set) var hasLastName:Bool = false

        public fileprivate(set) var alreadyRegistred:Bool = false
        public fileprivate(set) var hasAlreadyRegistred:Bool = false

        public fileprivate(set) var deviceInfo:Com.Sportorganizer.Proto.Msgs.DeviceInfo!
        public fileprivate(set) var hasDeviceInfo:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhoneNumber {
                try codedOutputStream.writeString(fieldNumber: 1, value:phoneNumber)
            }
            if hasUsername {
                try codedOutputStream.writeString(fieldNumber: 2, value:username)
            }
            if hasFirstName {
                try codedOutputStream.writeString(fieldNumber: 3, value:firstName)
            }
            if hasLastName {
                try codedOutputStream.writeString(fieldNumber: 4, value:lastName)
            }
            if hasAlreadyRegistred {
                try codedOutputStream.writeBool(fieldNumber: 5, value:alreadyRegistred)
            }
            if hasDeviceInfo {
                try codedOutputStream.writeMessage(fieldNumber: 6, value:deviceInfo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeStringSize(fieldNumber: 1)
            }
            if hasUsername {
                serialize_size += username.computeStringSize(fieldNumber: 2)
            }
            if hasFirstName {
                serialize_size += firstName.computeStringSize(fieldNumber: 3)
            }
            if hasLastName {
                serialize_size += lastName.computeStringSize(fieldNumber: 4)
            }
            if hasAlreadyRegistred {
                serialize_size += alreadyRegistred.computeBoolSize(fieldNumber: 5)
            }
            if hasDeviceInfo {
                if let varSizedeviceInfo = deviceInfo?.computeMessageSize(fieldNumber: 6) {
                    serialize_size += varSizedeviceInfo
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationRequest.classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.RegistrationRequest) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = phoneNumber
            }
            if hasUsername {
                jsonMap["username"] = username
            }
            if hasFirstName {
                jsonMap["firstName"] = firstName
            }
            if hasLastName {
                jsonMap["lastName"] = lastName
            }
            if hasAlreadyRegistred {
                jsonMap["alreadyRegistred"] = alreadyRegistred
            }
            if hasDeviceInfo {
                jsonMap["deviceInfo"] = try deviceInfo.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            if hasUsername {
                output += "\(indent) username: \(username) \n"
            }
            if hasFirstName {
                output += "\(indent) firstName: \(firstName) \n"
            }
            if hasLastName {
                output += "\(indent) lastName: \(lastName) \n"
            }
            if hasAlreadyRegistred {
                output += "\(indent) alreadyRegistred: \(alreadyRegistred) \n"
            }
            if hasDeviceInfo {
                output += "\(indent) deviceInfo {\n"
                if let outDescDeviceInfo = deviceInfo {
                    output += try outDescDeviceInfo.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                if hasUsername {
                    hashCode = (hashCode &* 31) &+ username.hashValue
                }
                if hasFirstName {
                    hashCode = (hashCode &* 31) &+ firstName.hashValue
                }
                if hasLastName {
                    hashCode = (hashCode &* 31) &+ lastName.hashValue
                }
                if hasAlreadyRegistred {
                    hashCode = (hashCode &* 31) &+ alreadyRegistred.hashValue
                }
                if hasDeviceInfo {
                    if let hashValuedeviceInfo = deviceInfo?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuedeviceInfo
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationRequest"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.RegistrationRequest = Com.Sportorganizer.Proto.Msgs.RegistrationRequest()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phoneNumber:String {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = ""
                return self
            }
            public var username:String {
                get {
                    return builderResult.username
                }
                set (value) {
                    builderResult.hasUsername = true
                    builderResult.username = value
                }
            }
            public var hasUsername:Bool {
                get {
                    return builderResult.hasUsername
                }
            }
            @discardableResult
            public func setUsername(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.username = value
                return self
            }
            @discardableResult
            public func clearUsername() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder{
                builderResult.hasUsername = false
                builderResult.username = ""
                return self
            }
            public var firstName:String {
                get {
                    return builderResult.firstName
                }
                set (value) {
                    builderResult.hasFirstName = true
                    builderResult.firstName = value
                }
            }
            public var hasFirstName:Bool {
                get {
                    return builderResult.hasFirstName
                }
            }
            @discardableResult
            public func setFirstName(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.firstName = value
                return self
            }
            @discardableResult
            public func clearFirstName() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder{
                builderResult.hasFirstName = false
                builderResult.firstName = ""
                return self
            }
            public var lastName:String {
                get {
                    return builderResult.lastName
                }
                set (value) {
                    builderResult.hasLastName = true
                    builderResult.lastName = value
                }
            }
            public var hasLastName:Bool {
                get {
                    return builderResult.hasLastName
                }
            }
            @discardableResult
            public func setLastName(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.lastName = value
                return self
            }
            @discardableResult
            public func clearLastName() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder{
                builderResult.hasLastName = false
                builderResult.lastName = ""
                return self
            }
            public var alreadyRegistred:Bool {
                get {
                    return builderResult.alreadyRegistred
                }
                set (value) {
                    builderResult.hasAlreadyRegistred = true
                    builderResult.alreadyRegistred = value
                }
            }
            public var hasAlreadyRegistred:Bool {
                get {
                    return builderResult.hasAlreadyRegistred
                }
            }
            @discardableResult
            public func setAlreadyRegistred(_ value:Bool) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.alreadyRegistred = value
                return self
            }
            @discardableResult
            public func clearAlreadyRegistred() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder{
                builderResult.hasAlreadyRegistred = false
                builderResult.alreadyRegistred = false
                return self
            }
            public var deviceInfo:Com.Sportorganizer.Proto.Msgs.DeviceInfo! {
                get {
                    if deviceInfoBuilder_ != nil {
                        builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
                    }
                    return builderResult.deviceInfo
                }
                set (value) {
                    builderResult.hasDeviceInfo = true
                    builderResult.deviceInfo = value
                }
            }
            public var hasDeviceInfo:Bool {
                get {
                    return builderResult.hasDeviceInfo
                }
            }
            fileprivate var deviceInfoBuilder_:Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder! {
                didSet {
                    builderResult.hasDeviceInfo = true
                }
            }
            public func getDeviceInfoBuilder() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                if deviceInfoBuilder_ == nil {
                    deviceInfoBuilder_ = Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
                    builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
                    if deviceInfo != nil {
                        try! deviceInfoBuilder_.mergeFrom(other: deviceInfo)
                    }
                }
                return deviceInfoBuilder_
            }
            @discardableResult
            public func setDeviceInfo(_ value:Com.Sportorganizer.Proto.Msgs.DeviceInfo!) -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                self.deviceInfo = value
                return self
            }
            @discardableResult
            public func mergeDeviceInfo(value:Com.Sportorganizer.Proto.Msgs.DeviceInfo) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                if builderResult.hasDeviceInfo {
                    builderResult.deviceInfo = try Com.Sportorganizer.Proto.Msgs.DeviceInfo.builderWithPrototype(prototype:builderResult.deviceInfo).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.deviceInfo = value
                }
                builderResult.hasDeviceInfo = true
                return self
            }
            @discardableResult
            public func clearDeviceInfo() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                deviceInfoBuilder_ = nil
                builderResult.hasDeviceInfo = false
                builderResult.deviceInfo = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.RegistrationRequest()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
                let returnMe:Com.Sportorganizer.Proto.Msgs.RegistrationRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.RegistrationRequest) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.RegistrationRequest() {
                    return self
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                if other.hasUsername {
                    username = other.username
                }
                if other.hasFirstName {
                    firstName = other.firstName
                }
                if other.hasLastName {
                    lastName = other.lastName
                }
                if other.hasAlreadyRegistred {
                    alreadyRegistred = other.alreadyRegistred
                }
                if (other.hasDeviceInfo) {
                    try mergeDeviceInfo(value: other.deviceInfo)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phoneNumber = try codedInputStream.readString()

                    case 18:
                        username = try codedInputStream.readString()

                    case 26:
                        firstName = try codedInputStream.readString()

                    case 34:
                        lastName = try codedInputStream.readString()

                    case 40:
                        alreadyRegistred = try codedInputStream.readBool()

                    case 50:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder = Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
                        if hasDeviceInfo {
                            try subBuilder.mergeFrom(other: deviceInfo)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        deviceInfo = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder()
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = jsonValuePhoneNumber
                }
                if let jsonValueUsername = jsonMap["username"] as? String {
                    resultDecodedBuilder.username = jsonValueUsername
                }
                if let jsonValueFirstName = jsonMap["firstName"] as? String {
                    resultDecodedBuilder.firstName = jsonValueFirstName
                }
                if let jsonValueLastName = jsonMap["lastName"] as? String {
                    resultDecodedBuilder.lastName = jsonValueLastName
                }
                if let jsonValueAlreadyRegistred = jsonMap["alreadyRegistred"] as? Bool {
                    resultDecodedBuilder.alreadyRegistred = jsonValueAlreadyRegistred
                }
                if let jsonValueDeviceInfo = jsonMap["deviceInfo"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.deviceInfo = try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsonValueDeviceInfo).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RegistrationToken : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.RegistrationToken, rhs: Com.Sportorganizer.Proto.Msgs.RegistrationToken) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phoneNumber:String = ""
        public fileprivate(set) var hasPhoneNumber:Bool = false

        public fileprivate(set) var token:String = ""
        public fileprivate(set) var hasToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhoneNumber {
                try codedOutputStream.writeString(fieldNumber: 1, value:phoneNumber)
            }
            if hasToken {
                try codedOutputStream.writeString(fieldNumber: 2, value:token)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeStringSize(fieldNumber: 1)
            }
            if hasToken {
                serialize_size += token.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationToken.classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.RegistrationToken) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = phoneNumber
            }
            if hasToken {
                jsonMap["token"] = token
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            if hasToken {
                output += "\(indent) token: \(token) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                if hasToken {
                    hashCode = (hashCode &* 31) &+ token.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationToken"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationToken"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.RegistrationToken = Com.Sportorganizer.Proto.Msgs.RegistrationToken()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phoneNumber:String {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = ""
                return self
            }
            public var token:String {
                get {
                    return builderResult.token
                }
                set (value) {
                    builderResult.hasToken = true
                    builderResult.token = value
                }
            }
            public var hasToken:Bool {
                get {
                    return builderResult.hasToken
                }
            }
            @discardableResult
            public func setToken(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                self.token = value
                return self
            }
            @discardableResult
            public func clearToken() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder{
                builderResult.hasToken = false
                builderResult.token = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.RegistrationToken()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
                let returnMe:Com.Sportorganizer.Proto.Msgs.RegistrationToken = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.RegistrationToken) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.RegistrationToken() {
                    return self
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                if other.hasToken {
                    token = other.token
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phoneNumber = try codedInputStream.readString()

                    case 18:
                        token = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder()
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = jsonValuePhoneNumber
                }
                if let jsonValueToken = jsonMap["token"] as? String {
                    resultDecodedBuilder.token = jsonValueToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RegistrationConfirm : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.RegistrationConfirm, rhs: Com.Sportorganizer.Proto.Msgs.RegistrationConfirm) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = fieldCheck && (lhs.hasAdditionalInfo == rhs.hasAdditionalInfo) && (!lhs.hasAdditionalInfo || lhs.additionalInfo == rhs.additionalInfo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phoneNumber:String = ""
        public fileprivate(set) var hasPhoneNumber:Bool = false

        public fileprivate(set) var additionalInfo:String = ""
        public fileprivate(set) var hasAdditionalInfo:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhoneNumber {
                try codedOutputStream.writeString(fieldNumber: 1, value:phoneNumber)
            }
            if hasAdditionalInfo {
                try codedOutputStream.writeString(fieldNumber: 2, value:additionalInfo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeStringSize(fieldNumber: 1)
            }
            if hasAdditionalInfo {
                serialize_size += additionalInfo.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = phoneNumber
            }
            if hasAdditionalInfo {
                jsonMap["additionalInfo"] = additionalInfo
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            if hasAdditionalInfo {
                output += "\(indent) additionalInfo: \(additionalInfo) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                if hasAdditionalInfo {
                    hashCode = (hashCode &* 31) &+ additionalInfo.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationConfirm"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationConfirm"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm = Com.Sportorganizer.Proto.Msgs.RegistrationConfirm()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phoneNumber:String {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = ""
                return self
            }
            public var additionalInfo:String {
                get {
                    return builderResult.additionalInfo
                }
                set (value) {
                    builderResult.hasAdditionalInfo = true
                    builderResult.additionalInfo = value
                }
            }
            public var hasAdditionalInfo:Bool {
                get {
                    return builderResult.hasAdditionalInfo
                }
            }
            @discardableResult
            public func setAdditionalInfo(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                self.additionalInfo = value
                return self
            }
            @discardableResult
            public func clearAdditionalInfo() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder{
                builderResult.hasAdditionalInfo = false
                builderResult.additionalInfo = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.RegistrationConfirm()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
                let returnMe:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.RegistrationConfirm) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.RegistrationConfirm() {
                    return self
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                if other.hasAdditionalInfo {
                    additionalInfo = other.additionalInfo
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phoneNumber = try codedInputStream.readString()

                    case 18:
                        additionalInfo = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder()
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = jsonValuePhoneNumber
                }
                if let jsonValueAdditionalInfo = jsonMap["additionalInfo"] as? String {
                    resultDecodedBuilder.additionalInfo = jsonValueAdditionalInfo
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RegistrationResponse : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.RegistrationResponse, rhs: Com.Sportorganizer.Proto.Msgs.RegistrationResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasAdditionalInfo == rhs.hasAdditionalInfo) && (!lhs.hasAdditionalInfo || lhs.additionalInfo == rhs.additionalInfo)
            fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum RegistrationStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case requestAccepted = 0
                case tokenAccepted = 1
                case badCredentials = 2
                case completed = 3
                public func toString() -> String {
                    switch self {
                    case .requestAccepted: return "REQUEST_ACCEPTED"
                    case .tokenAccepted: return "TOKEN_ACCEPTED"
                    case .badCredentials: return "BAD_CREDENTIALS"
                    case .completed: return "COMPLETED"
                    }
                }
                public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus {
                    switch str {
                    case "REQUEST_ACCEPTED":    return .requestAccepted
                    case "TOKEN_ACCEPTED":    return .tokenAccepted
                    case "BAD_CREDENTIALS":    return .badCredentials
                    case "COMPLETED":    return .completed
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .requestAccepted: return ".requestAccepted"
                    case .tokenAccepted: return ".tokenAccepted"
                    case .badCredentials: return ".badCredentials"
                    case .completed: return ".completed"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:RegistrationStatus, rhs:RegistrationStatus) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var status:Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus = Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus.requestAccepted
        public fileprivate(set) var hasStatus:Bool = false
        public fileprivate(set) var phoneNumber:String = ""
        public fileprivate(set) var hasPhoneNumber:Bool = false

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        public fileprivate(set) var additionalInfo:String = ""
        public fileprivate(set) var hasAdditionalInfo:Bool = false

        public fileprivate(set) var token:String = ""
        public fileprivate(set) var hasToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:status.rawValue)
            }
            if hasPhoneNumber {
                try codedOutputStream.writeString(fieldNumber: 2, value:phoneNumber)
            }
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 3, value:password)
            }
            if hasAdditionalInfo {
                try codedOutputStream.writeString(fieldNumber: 4, value:additionalInfo)
            }
            if hasToken {
                try codedOutputStream.writeString(fieldNumber: 5, value:token)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeStringSize(fieldNumber: 2)
            }
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 3)
            }
            if hasAdditionalInfo {
                serialize_size += additionalInfo.computeStringSize(fieldNumber: 4)
            }
            if hasToken {
                serialize_size += token.computeStringSize(fieldNumber: 5)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationResponse.classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.RegistrationResponse) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = phoneNumber
            }
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasAdditionalInfo {
                jsonMap["additionalInfo"] = additionalInfo
            }
            if hasToken {
                jsonMap["token"] = token
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
            return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasAdditionalInfo {
                output += "\(indent) additionalInfo: \(additionalInfo) \n"
            }
            if hasToken {
                output += "\(indent) token: \(token) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasAdditionalInfo {
                    hashCode = (hashCode &* 31) &+ additionalInfo.hashValue
                }
                if hasToken {
                    hashCode = (hashCode &* 31) &+ token.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationResponse"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.RegistrationResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.RegistrationResponse = Com.Sportorganizer.Proto.Msgs.RegistrationResponse()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var status:Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .requestAccepted
                   return self
                }
            public var phoneNumber:String {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = ""
                return self
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            public var additionalInfo:String {
                get {
                    return builderResult.additionalInfo
                }
                set (value) {
                    builderResult.hasAdditionalInfo = true
                    builderResult.additionalInfo = value
                }
            }
            public var hasAdditionalInfo:Bool {
                get {
                    return builderResult.hasAdditionalInfo
                }
            }
            @discardableResult
            public func setAdditionalInfo(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                self.additionalInfo = value
                return self
            }
            @discardableResult
            public func clearAdditionalInfo() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder{
                builderResult.hasAdditionalInfo = false
                builderResult.additionalInfo = ""
                return self
            }
            public var token:String {
                get {
                    return builderResult.token
                }
                set (value) {
                    builderResult.hasToken = true
                    builderResult.token = value
                }
            }
            public var hasToken:Bool {
                get {
                    return builderResult.hasToken
                }
            }
            @discardableResult
            public func setToken(_ value:String) -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                self.token = value
                return self
            }
            @discardableResult
            public func clearToken() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder{
                builderResult.hasToken = false
                builderResult.token = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.RegistrationResponse()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
                let returnMe:Com.Sportorganizer.Proto.Msgs.RegistrationResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.RegistrationResponse) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.RegistrationResponse() {
                    return self
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                if other.hasPassword {
                    password = other.password
                }
                if other.hasAdditionalInfo {
                    additionalInfo = other.additionalInfo
                }
                if other.hasToken {
                    token = other.token
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntstatus))
                        }

                    case 18:
                        phoneNumber = try codedInputStream.readString()

                    case 26:
                        password = try codedInputStream.readString()

                    case 34:
                        additionalInfo = try codedInputStream.readString()

                    case 42:
                        token = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder()
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus.fromString(str: jsonValueStatus)
                }
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = jsonValuePhoneNumber
                }
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueAdditionalInfo = jsonMap["additionalInfo"] as? String {
                    resultDecodedBuilder.additionalInfo = jsonValueAdditionalInfo
                }
                if let jsonValueToken = jsonMap["token"] as? String {
                    resultDecodedBuilder.token = jsonValueToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SignInRequest : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SignInRequest, rhs: Com.Sportorganizer.Proto.Msgs.SignInRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
            fieldCheck = fieldCheck && (lhs.hasDeviceInfo == rhs.hasDeviceInfo) && (!lhs.hasDeviceInfo || lhs.deviceInfo == rhs.deviceInfo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var phoneNumber:String = ""
        public fileprivate(set) var hasPhoneNumber:Bool = false

        public fileprivate(set) var password:String = ""
        public fileprivate(set) var hasPassword:Bool = false

        public fileprivate(set) var deviceInfo:Com.Sportorganizer.Proto.Msgs.DeviceInfo!
        public fileprivate(set) var hasDeviceInfo:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPhoneNumber {
                try codedOutputStream.writeString(fieldNumber: 1, value:phoneNumber)
            }
            if hasPassword {
                try codedOutputStream.writeString(fieldNumber: 2, value:password)
            }
            if hasDeviceInfo {
                try codedOutputStream.writeMessage(fieldNumber: 5, value:deviceInfo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeStringSize(fieldNumber: 1)
            }
            if hasPassword {
                serialize_size += password.computeStringSize(fieldNumber: 2)
            }
            if hasDeviceInfo {
                if let varSizedeviceInfo = deviceInfo?.computeMessageSize(fieldNumber: 5) {
                    serialize_size += varSizedeviceInfo
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
            return Com.Sportorganizer.Proto.Msgs.SignInRequest.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SignInRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SignInRequest) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = phoneNumber
            }
            if hasPassword {
                jsonMap["password"] = password
            }
            if hasDeviceInfo {
                jsonMap["deviceInfo"] = try deviceInfo.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
            return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
            return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            if hasPassword {
                output += "\(indent) password: \(password) \n"
            }
            if hasDeviceInfo {
                output += "\(indent) deviceInfo {\n"
                if let outDescDeviceInfo = deviceInfo {
                    output += try outDescDeviceInfo.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                if hasPassword {
                    hashCode = (hashCode &* 31) &+ password.hashValue
                }
                if hasDeviceInfo {
                    if let hashValuedeviceInfo = deviceInfo?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuedeviceInfo
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SignInRequest"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SignInRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SignInRequest = Com.Sportorganizer.Proto.Msgs.SignInRequest()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var phoneNumber:String {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = ""
                return self
            }
            public var password:String {
                get {
                    return builderResult.password
                }
                set (value) {
                    builderResult.hasPassword = true
                    builderResult.password = value
                }
            }
            public var hasPassword:Bool {
                get {
                    return builderResult.hasPassword
                }
            }
            @discardableResult
            public func setPassword(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                self.password = value
                return self
            }
            @discardableResult
            public func clearPassword() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder{
                builderResult.hasPassword = false
                builderResult.password = ""
                return self
            }
            public var deviceInfo:Com.Sportorganizer.Proto.Msgs.DeviceInfo! {
                get {
                    if deviceInfoBuilder_ != nil {
                        builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
                    }
                    return builderResult.deviceInfo
                }
                set (value) {
                    builderResult.hasDeviceInfo = true
                    builderResult.deviceInfo = value
                }
            }
            public var hasDeviceInfo:Bool {
                get {
                    return builderResult.hasDeviceInfo
                }
            }
            fileprivate var deviceInfoBuilder_:Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder! {
                didSet {
                    builderResult.hasDeviceInfo = true
                }
            }
            public func getDeviceInfoBuilder() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                if deviceInfoBuilder_ == nil {
                    deviceInfoBuilder_ = Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
                    builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
                    if deviceInfo != nil {
                        try! deviceInfoBuilder_.mergeFrom(other: deviceInfo)
                    }
                }
                return deviceInfoBuilder_
            }
            @discardableResult
            public func setDeviceInfo(_ value:Com.Sportorganizer.Proto.Msgs.DeviceInfo!) -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                self.deviceInfo = value
                return self
            }
            @discardableResult
            public func mergeDeviceInfo(value:Com.Sportorganizer.Proto.Msgs.DeviceInfo) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                if builderResult.hasDeviceInfo {
                    builderResult.deviceInfo = try Com.Sportorganizer.Proto.Msgs.DeviceInfo.builderWithPrototype(prototype:builderResult.deviceInfo).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.deviceInfo = value
                }
                builderResult.hasDeviceInfo = true
                return self
            }
            @discardableResult
            public func clearDeviceInfo() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                deviceInfoBuilder_ = nil
                builderResult.hasDeviceInfo = false
                builderResult.deviceInfo = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SignInRequest()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SignInRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SignInRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SignInRequest) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SignInRequest() {
                    return self
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                if other.hasPassword {
                    password = other.password
                }
                if (other.hasDeviceInfo) {
                    try mergeDeviceInfo(value: other.deviceInfo)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        phoneNumber = try codedInputStream.readString()

                    case 18:
                        password = try codedInputStream.readString()

                    case 42:
                        let subBuilder:Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder = Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
                        if hasDeviceInfo {
                            try subBuilder.mergeFrom(other: deviceInfo)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        deviceInfo = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder()
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = jsonValuePhoneNumber
                }
                if let jsonValuePassword = jsonMap["password"] as? String {
                    resultDecodedBuilder.password = jsonValuePassword
                }
                if let jsonValueDeviceInfo = jsonMap["deviceInfo"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.deviceInfo = try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsonValueDeviceInfo).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SignInResponse : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SignInResponse, rhs: Com.Sportorganizer.Proto.Msgs.SignInResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
            fieldCheck = fieldCheck && (lhs.hasAdditionalInfo == rhs.hasAdditionalInfo) && (!lhs.hasAdditionalInfo || lhs.additionalInfo == rhs.additionalInfo)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum SignInResult:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case success = 0
                case failure = 1
                public func toString() -> String {
                    switch self {
                    case .success: return "SUCCESS"
                    case .failure: return "FAILURE"
                    }
                }
                public static func fromString(str:String) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult {
                    switch str {
                    case "SUCCESS":    return .success
                    case "FAILURE":    return .failure
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .success: return ".success"
                    case .failure: return ".failure"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:SignInResult, rhs:SignInResult) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var result:Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult = Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult.success
        public fileprivate(set) var hasResult:Bool = false
        public fileprivate(set) var additionalInfo:String = ""
        public fileprivate(set) var hasAdditionalInfo:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasResult {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:result.rawValue)
            }
            if hasAdditionalInfo {
                try codedOutputStream.writeString(fieldNumber: 2, value:additionalInfo)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasResult) {
                serialize_size += result.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasAdditionalInfo {
                serialize_size += additionalInfo.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
            return Com.Sportorganizer.Proto.Msgs.SignInResponse.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SignInResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SignInResponse) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasResult {
                jsonMap["result"] = result.toString()
            }
            if hasAdditionalInfo {
                jsonMap["additionalInfo"] = additionalInfo
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
            return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
            return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasResult) {
                output += "\(indent) result: \(result.description)\n"
            }
            if hasAdditionalInfo {
                output += "\(indent) additionalInfo: \(additionalInfo) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasResult {
                     hashCode = (hashCode &* 31) &+ result.hashValue
                }
                if hasAdditionalInfo {
                    hashCode = (hashCode &* 31) &+ additionalInfo.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SignInResponse"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SignInResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SignInResponse = Com.Sportorganizer.Proto.Msgs.SignInResponse()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var result:Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult {
                    get {
                        return builderResult.result
                    }
                    set (value) {
                        builderResult.hasResult = true
                        builderResult.result = value
                    }
                }
                public var hasResult:Bool{
                    get {
                        return builderResult.hasResult
                    }
                }
            @discardableResult
                public func setResult(_ value:Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult) -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                  self.result = value
                  return self
                }
            @discardableResult
                public func clearResult() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                   builderResult.hasResult = false
                   builderResult.result = .success
                   return self
                }
            public var additionalInfo:String {
                get {
                    return builderResult.additionalInfo
                }
                set (value) {
                    builderResult.hasAdditionalInfo = true
                    builderResult.additionalInfo = value
                }
            }
            public var hasAdditionalInfo:Bool {
                get {
                    return builderResult.hasAdditionalInfo
                }
            }
            @discardableResult
            public func setAdditionalInfo(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                self.additionalInfo = value
                return self
            }
            @discardableResult
            public func clearAdditionalInfo() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder{
                builderResult.hasAdditionalInfo = false
                builderResult.additionalInfo = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SignInResponse()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SignInResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SignInResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SignInResponse) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SignInResponse() {
                    return self
                }
                if other.hasResult {
                    result = other.result
                }
                if other.hasAdditionalInfo {
                    additionalInfo = other.additionalInfo
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntresult = try codedInputStream.readEnum()
                        if let enumsresult = Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult(rawValue:valueIntresult){
                            result = enumsresult
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntresult))
                        }

                    case 18:
                        additionalInfo = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder()
                if let jsonValueResult = jsonMap["result"] as? String {
                    resultDecodedBuilder.result = try Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult.fromString(str: jsonValueResult)
                }
                if let jsonValueAdditionalInfo = jsonMap["additionalInfo"] as? String {
                    resultDecodedBuilder.additionalInfo = jsonValueAdditionalInfo
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class DeviceInfo : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.DeviceInfo, rhs: Com.Sportorganizer.Proto.Msgs.DeviceInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasDeviceName == rhs.hasDeviceName) && (!lhs.hasDeviceName || lhs.deviceName == rhs.deviceName)
            fieldCheck = fieldCheck && (lhs.hasOs == rhs.hasOs) && (!lhs.hasOs || lhs.os == rhs.os)
            fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
            fieldCheck = fieldCheck && (lhs.hasProcessor == rhs.hasProcessor) && (!lhs.hasProcessor || lhs.processor == rhs.processor)
            fieldCheck = fieldCheck && (lhs.additionalParams == rhs.additionalParams)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var deviceName:String = ""
        public fileprivate(set) var hasDeviceName:Bool = false

        public fileprivate(set) var os:String = ""
        public fileprivate(set) var hasOs:Bool = false

        public fileprivate(set) var platform:String = ""
        public fileprivate(set) var hasPlatform:Bool = false

        public fileprivate(set) var processor:String = ""
        public fileprivate(set) var hasProcessor:Bool = false

        public fileprivate(set) var additionalParams:Array<String> = Array<String>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasDeviceName {
                try codedOutputStream.writeString(fieldNumber: 1, value:deviceName)
            }
            if hasOs {
                try codedOutputStream.writeString(fieldNumber: 2, value:os)
            }
            if hasPlatform {
                try codedOutputStream.writeString(fieldNumber: 3, value:platform)
            }
            if hasProcessor {
                try codedOutputStream.writeString(fieldNumber: 4, value:processor)
            }
            if !additionalParams.isEmpty {
                for oneValueadditionalParams in additionalParams {
                    try codedOutputStream.writeString(fieldNumber: 5, value:oneValueadditionalParams)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasDeviceName {
                serialize_size += deviceName.computeStringSize(fieldNumber: 1)
            }
            if hasOs {
                serialize_size += os.computeStringSize(fieldNumber: 2)
            }
            if hasPlatform {
                serialize_size += platform.computeStringSize(fieldNumber: 3)
            }
            if hasProcessor {
                serialize_size += processor.computeStringSize(fieldNumber: 4)
            }
            var dataSizeAdditionalParams:Int32 = 0
            for oneValueadditionalParams in additionalParams {
                dataSizeAdditionalParams += oneValueadditionalParams.computeStringSizeNoTag()
            }
            serialize_size += dataSizeAdditionalParams
            serialize_size += 1 * Int32(additionalParams.count)
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
            return Com.Sportorganizer.Proto.Msgs.DeviceInfo.classBuilder() as! Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
            return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.DeviceInfo) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
            return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasDeviceName {
                jsonMap["deviceName"] = deviceName
            }
            if hasOs {
                jsonMap["os"] = os
            }
            if hasPlatform {
                jsonMap["platform"] = platform
            }
            if hasProcessor {
                jsonMap["processor"] = processor
            }
            if !additionalParams.isEmpty {
                var jsonArrayAdditionalParams:Array<String> = []
                for oneValueAdditionalParams in additionalParams {
                    jsonArrayAdditionalParams.append(oneValueAdditionalParams)
                }
                jsonMap["additionalParams"] = jsonArrayAdditionalParams
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
            return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
            return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasDeviceName {
                output += "\(indent) deviceName: \(deviceName) \n"
            }
            if hasOs {
                output += "\(indent) os: \(os) \n"
            }
            if hasPlatform {
                output += "\(indent) platform: \(platform) \n"
            }
            if hasProcessor {
                output += "\(indent) processor: \(processor) \n"
            }
            var additionalParamsElementIndex:Int = 0
            for oneValueAdditionalParams in additionalParams  {
                output += "\(indent) additionalParams[\(additionalParamsElementIndex)]: \(oneValueAdditionalParams)\n"
                additionalParamsElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDeviceName {
                    hashCode = (hashCode &* 31) &+ deviceName.hashValue
                }
                if hasOs {
                    hashCode = (hashCode &* 31) &+ os.hashValue
                }
                if hasPlatform {
                    hashCode = (hashCode &* 31) &+ platform.hashValue
                }
                if hasProcessor {
                    hashCode = (hashCode &* 31) &+ processor.hashValue
                }
                for oneValueAdditionalParams in additionalParams {
                    hashCode = (hashCode &* 31) &+ oneValueAdditionalParams.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.DeviceInfo"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.DeviceInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.DeviceInfo = Com.Sportorganizer.Proto.Msgs.DeviceInfo()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var deviceName:String {
                get {
                    return builderResult.deviceName
                }
                set (value) {
                    builderResult.hasDeviceName = true
                    builderResult.deviceName = value
                }
            }
            public var hasDeviceName:Bool {
                get {
                    return builderResult.hasDeviceName
                }
            }
            @discardableResult
            public func setDeviceName(_ value:String) -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                self.deviceName = value
                return self
            }
            @discardableResult
            public func clearDeviceName() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder{
                builderResult.hasDeviceName = false
                builderResult.deviceName = ""
                return self
            }
            public var os:String {
                get {
                    return builderResult.os
                }
                set (value) {
                    builderResult.hasOs = true
                    builderResult.os = value
                }
            }
            public var hasOs:Bool {
                get {
                    return builderResult.hasOs
                }
            }
            @discardableResult
            public func setOs(_ value:String) -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                self.os = value
                return self
            }
            @discardableResult
            public func clearOs() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder{
                builderResult.hasOs = false
                builderResult.os = ""
                return self
            }
            public var platform:String {
                get {
                    return builderResult.platform
                }
                set (value) {
                    builderResult.hasPlatform = true
                    builderResult.platform = value
                }
            }
            public var hasPlatform:Bool {
                get {
                    return builderResult.hasPlatform
                }
            }
            @discardableResult
            public func setPlatform(_ value:String) -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                self.platform = value
                return self
            }
            @discardableResult
            public func clearPlatform() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder{
                builderResult.hasPlatform = false
                builderResult.platform = ""
                return self
            }
            public var processor:String {
                get {
                    return builderResult.processor
                }
                set (value) {
                    builderResult.hasProcessor = true
                    builderResult.processor = value
                }
            }
            public var hasProcessor:Bool {
                get {
                    return builderResult.hasProcessor
                }
            }
            @discardableResult
            public func setProcessor(_ value:String) -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                self.processor = value
                return self
            }
            @discardableResult
            public func clearProcessor() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder{
                builderResult.hasProcessor = false
                builderResult.processor = ""
                return self
            }
            public var additionalParams:Array<String> {
                get {
                    return builderResult.additionalParams
                }
                set (array) {
                    builderResult.additionalParams = array
                }
            }
            @discardableResult
            public func setAdditionalParams(_ value:Array<String>) -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                self.additionalParams = value
                return self
            }
            @discardableResult
            public func clearAdditionalParams() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                builderResult.additionalParams.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.DeviceInfo()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
                let returnMe:Com.Sportorganizer.Proto.Msgs.DeviceInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.DeviceInfo) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.DeviceInfo() {
                    return self
                }
                if other.hasDeviceName {
                    deviceName = other.deviceName
                }
                if other.hasOs {
                    os = other.os
                }
                if other.hasPlatform {
                    platform = other.platform
                }
                if other.hasProcessor {
                    processor = other.processor
                }
                if !other.additionalParams.isEmpty {
                    builderResult.additionalParams += other.additionalParams
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        deviceName = try codedInputStream.readString()

                    case 18:
                        os = try codedInputStream.readString()

                    case 26:
                        platform = try codedInputStream.readString()

                    case 34:
                        processor = try codedInputStream.readString()

                    case 42:
                        additionalParams += [try codedInputStream.readString()]

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder()
                if let jsonValueDeviceName = jsonMap["deviceName"] as? String {
                    resultDecodedBuilder.deviceName = jsonValueDeviceName
                }
                if let jsonValueOs = jsonMap["os"] as? String {
                    resultDecodedBuilder.os = jsonValueOs
                }
                if let jsonValuePlatform = jsonMap["platform"] as? String {
                    resultDecodedBuilder.platform = jsonValuePlatform
                }
                if let jsonValueProcessor = jsonMap["processor"] as? String {
                    resultDecodedBuilder.processor = jsonValueProcessor
                }
                if let jsonValueAdditionalParams = jsonMap["additionalParams"] as? Array<String> {
                    var jsonArrayAdditionalParams:Array<String> = []
                    for oneValueAdditionalParams in jsonValueAdditionalParams {
                        jsonArrayAdditionalParams.append(oneValueAdditionalParams)
                    }
                    resultDecodedBuilder.additionalParams = jsonArrayAdditionalParams
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SimpleNotification : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SimpleNotification, rhs: Com.Sportorganizer.Proto.Msgs.SimpleNotification) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var code:Int32 = Int32(0)
        public fileprivate(set) var hasCode:Bool = false

        public fileprivate(set) var text:String = ""
        public fileprivate(set) var hasText:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasCode {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:code)
            }
            if hasText {
                try codedOutputStream.writeString(fieldNumber: 2, value:text)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasCode {
                serialize_size += code.computeInt32Size(fieldNumber: 1)
            }
            if hasText {
                serialize_size += text.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotification.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SimpleNotification) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasCode {
                jsonMap["code"] = Int(code)
            }
            if hasText {
                jsonMap["text"] = text
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            if hasText {
                output += "\(indent) text: \(text) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasText {
                    hashCode = (hashCode &* 31) &+ text.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleNotification"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleNotification"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SimpleNotification = Com.Sportorganizer.Proto.Msgs.SimpleNotification()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var code:Int32 {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:Int32) -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder{
                builderResult.hasCode = false
                builderResult.code = Int32(0)
                return self
            }
            public var text:String {
                get {
                    return builderResult.text
                }
                set (value) {
                    builderResult.hasText = true
                    builderResult.text = value
                }
            }
            public var hasText:Bool {
                get {
                    return builderResult.hasText
                }
            }
            @discardableResult
            public func setText(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                self.text = value
                return self
            }
            @discardableResult
            public func clearText() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder{
                builderResult.hasText = false
                builderResult.text = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SimpleNotification()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SimpleNotification = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SimpleNotification) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SimpleNotification() {
                    return self
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasText {
                    text = other.text
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        code = try codedInputStream.readInt32()

                    case 18:
                        text = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder()
                if let jsonValueCode = jsonMap["code"] as? Int {
                    resultDecodedBuilder.code = Int32(jsonValueCode)
                } else if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = Int32(jsonValueCode)!
                }
                if let jsonValueText = jsonMap["text"] as? String {
                    resultDecodedBuilder.text = jsonValueText
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SimpleNotificationPush : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush, rhs: Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var code:Int32 = Int32(0)
        public fileprivate(set) var hasCode:Bool = false

        public fileprivate(set) var text:String = ""
        public fileprivate(set) var hasText:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasCode {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:code)
            }
            if hasText {
                try codedOutputStream.writeString(fieldNumber: 2, value:text)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasCode {
                serialize_size += code.computeInt32Size(fieldNumber: 1)
            }
            if hasText {
                serialize_size += text.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasCode {
                jsonMap["code"] = Int(code)
            }
            if hasText {
                jsonMap["text"] = text
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
            return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            if hasText {
                output += "\(indent) text: \(text) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasText {
                    hashCode = (hashCode &* 31) &+ text.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush = Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var code:Int32 {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:Int32) -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder{
                builderResult.hasCode = false
                builderResult.code = Int32(0)
                return self
            }
            public var text:String {
                get {
                    return builderResult.text
                }
                set (value) {
                    builderResult.hasText = true
                    builderResult.text = value
                }
            }
            public var hasText:Bool {
                get {
                    return builderResult.hasText
                }
            }
            @discardableResult
            public func setText(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                self.text = value
                return self
            }
            @discardableResult
            public func clearText() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder{
                builderResult.hasText = false
                builderResult.text = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush() {
                    return self
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasText {
                    text = other.text
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        code = try codedInputStream.readInt32()

                    case 18:
                        text = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder()
                if let jsonValueCode = jsonMap["code"] as? Int {
                    resultDecodedBuilder.code = Int32(jsonValueCode)
                } else if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = Int32(jsonValueCode)!
                }
                if let jsonValueText = jsonMap["text"] as? String {
                    resultDecodedBuilder.text = jsonValueText
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SimpleSystemMessage : GeneratedMessage {

        public static func == (lhs: Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage, rhs: Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
            fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var code:Int32 = Int32(0)
        public fileprivate(set) var hasCode:Bool = false

        public fileprivate(set) var text:String = ""
        public fileprivate(set) var hasText:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasCode {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:code)
            }
            if hasText {
                try codedOutputStream.writeString(fieldNumber: 2, value:text)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasCode {
                serialize_size += code.computeInt32Size(fieldNumber: 1)
            }
            if hasText {
                serialize_size += text.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
            return Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder
        }
        public func getBuilder() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
            return classBuilder() as! Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder()
        }
        public func toBuilder() throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
            return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasCode {
                jsonMap["code"] = Int(code)
            }
            if hasText {
                jsonMap["text"] = text
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
            return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
            return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasCode {
                output += "\(indent) code: \(code) \n"
            }
            if hasText {
                output += "\(indent) text: \(text) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasCode {
                    hashCode = (hashCode &* 31) &+ code.hashValue
                }
                if hasText {
                    hashCode = (hashCode &* 31) &+ text.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage"
        }
        override public func className() -> String {
            return "Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage = Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage()
            public func getMessage() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var code:Int32 {
                get {
                    return builderResult.code
                }
                set (value) {
                    builderResult.hasCode = true
                    builderResult.code = value
                }
            }
            public var hasCode:Bool {
                get {
                    return builderResult.hasCode
                }
            }
            @discardableResult
            public func setCode(_ value:Int32) -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                self.code = value
                return self
            }
            @discardableResult
            public func clearCode() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder{
                builderResult.hasCode = false
                builderResult.code = Int32(0)
                return self
            }
            public var text:String {
                get {
                    return builderResult.text
                }
                set (value) {
                    builderResult.hasText = true
                    builderResult.text = value
                }
            }
            public var hasText:Bool {
                get {
                    return builderResult.hasText
                }
            }
            @discardableResult
            public func setText(_ value:String) -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                self.text = value
                return self
            }
            @discardableResult
            public func clearText() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder{
                builderResult.hasText = false
                builderResult.text = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                builderResult = Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage()
                return self
            }
            override public func clone() throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
                let returnMe:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                if other == Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage() {
                    return self
                }
                if other.hasCode {
                    code = other.code
                }
                if other.hasText {
                    text = other.text
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        code = try codedInputStream.readInt32()

                    case 18:
                        text = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                let resultDecodedBuilder = Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder()
                if let jsonValueCode = jsonMap["code"] as? Int {
                    resultDecodedBuilder.code = Int32(jsonValueCode)
                } else if let jsonValueCode = jsonMap["code"] as? String {
                    resultDecodedBuilder.code = Int32(jsonValueCode)!
                }
                if let jsonValueText = jsonMap["text"] as? String {
                    resultDecodedBuilder.text = jsonValueText
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Com.Sportorganizer.Proto.Msgs.AppMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.AppMessage> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.AppMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage? {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.AppMessage {
        return try Com.Sportorganizer.Proto.Msgs.AppMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "channelId": return self.channelId
        case "type": return self.type
        case "status": return self.status
        case "timestamp": return self.timestamp
        case "error": return self.error
        case "initServerMessage": return self.initServerMessage
        case "registrationRequest": return self.registrationRequest
        case "registrationResponse": return self.registrationResponse
        case "registrationToken": return self.registrationToken
        case "registrationConfirm": return self.registrationConfirm
        case "signIn": return self.signIn
        case "signInResponse": return self.signInResponse
        case "simpleNotification": return self.simpleNotification
        case "simpleNotificationPush": return self.simpleNotificationPush
        case "simpleSystemMessage": return self.simpleSystemMessage
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.AppMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "channelId": return self.channelId
            case "type": return self.type
            case "status": return self.status
            case "timestamp": return self.timestamp
            case "error": return self.error
            case "initServerMessage": return self.initServerMessage
            case "registrationRequest": return self.registrationRequest
            case "registrationResponse": return self.registrationResponse
            case "registrationToken": return self.registrationToken
            case "registrationConfirm": return self.registrationConfirm
            case "signIn": return self.signIn
            case "signInResponse": return self.signInResponse
            case "simpleNotification": return self.simpleNotification
            case "simpleNotificationPush": return self.simpleNotificationPush
            case "simpleSystemMessage": return self.simpleSystemMessage
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "channelId":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.AppMessage.MessageChannel else {
                    return
                }
                self.channelId = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.AppMessage.MessageType else {
                    return
                }
                self.type = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.AppMessage.MessageStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "timestamp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.timestamp = newSubscriptValue
            case "error":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SysError else {
                    return
                }
                self.error = newSubscriptValue
            case "initServerMessage":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.InitialServerMessage else {
                    return
                }
                self.initServerMessage = newSubscriptValue
            case "registrationRequest":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.RegistrationRequest else {
                    return
                }
                self.registrationRequest = newSubscriptValue
            case "registrationResponse":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.RegistrationResponse else {
                    return
                }
                self.registrationResponse = newSubscriptValue
            case "registrationToken":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.RegistrationToken else {
                    return
                }
                self.registrationToken = newSubscriptValue
            case "registrationConfirm":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.RegistrationConfirm else {
                    return
                }
                self.registrationConfirm = newSubscriptValue
            case "signIn":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SignInRequest else {
                    return
                }
                self.signIn = newSubscriptValue
            case "signInResponse":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SignInResponse else {
                    return
                }
                self.signInResponse = newSubscriptValue
            case "simpleNotification":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SimpleNotification else {
                    return
                }
                self.simpleNotification = newSubscriptValue
            case "simpleNotificationPush":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush else {
                    return
                }
                self.simpleNotificationPush = newSubscriptValue
            case "simpleSystemMessage":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage else {
                    return
                }
                self.simpleSystemMessage = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.Error: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.Error> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.Error>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.Error? {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.Error {
        return try Com.Sportorganizer.Proto.Msgs.Error.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "id": return self.id
        case "name": return self.name
        case "value": return self.value
        case "arguments": return self.arguments
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.Error.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "id": return self.id
            case "name": return self.name
            case "value": return self.value
            case "arguments": return self.arguments
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.ErrorType else {
                    return
                }
                self.type = newSubscriptValue
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.id = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.value = newSubscriptValue
            case "arguments":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.arguments = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SysError: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SysError> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SysError>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SysError? {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SysError {
        return try Com.Sportorganizer.Proto.Msgs.SysError.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "name": return self.name
        case "errors": return self.errors
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SysError.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "name": return self.name
            case "errors": return self.errors
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.id = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "errors":
                guard let newSubscriptValue = newSubscriptValue as? Array<Com.Sportorganizer.Proto.Msgs.Error> else {
                    return
                }
                self.errors = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.InitialServerMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.InitialServerMessage> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.InitialServerMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage? {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.InitialServerMessage {
        return try Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "serverOk": return self.serverOk
        case "additionalInfo": return self.additionalInfo
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.InitialServerMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "serverOk": return self.serverOk
            case "additionalInfo": return self.additionalInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "serverOk":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.serverOk = newSubscriptValue
            case "additionalInfo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.additionalInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.RegistrationRequest> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.RegistrationRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest? {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationRequest {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phoneNumber": return self.phoneNumber
        case "username": return self.username
        case "firstName": return self.firstName
        case "lastName": return self.lastName
        case "alreadyRegistred": return self.alreadyRegistred
        case "deviceInfo": return self.deviceInfo
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phoneNumber": return self.phoneNumber
            case "username": return self.username
            case "firstName": return self.firstName
            case "lastName": return self.lastName
            case "alreadyRegistred": return self.alreadyRegistred
            case "deviceInfo": return self.deviceInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            case "username":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.username = newSubscriptValue
            case "firstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.firstName = newSubscriptValue
            case "lastName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.lastName = newSubscriptValue
            case "alreadyRegistred":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.alreadyRegistred = newSubscriptValue
            case "deviceInfo":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.DeviceInfo else {
                    return
                }
                self.deviceInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationToken: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.RegistrationToken> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.RegistrationToken>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken? {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationToken {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phoneNumber": return self.phoneNumber
        case "token": return self.token
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationToken.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phoneNumber": return self.phoneNumber
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationConfirm: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.RegistrationConfirm> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.RegistrationConfirm>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm? {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationConfirm {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phoneNumber": return self.phoneNumber
        case "additionalInfo": return self.additionalInfo
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationConfirm.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phoneNumber": return self.phoneNumber
            case "additionalInfo": return self.additionalInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            case "additionalInfo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.additionalInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.RegistrationResponse> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.RegistrationResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse? {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.RegistrationResponse {
        return try Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "status": return self.status
        case "phoneNumber": return self.phoneNumber
        case "password": return self.password
        case "additionalInfo": return self.additionalInfo
        case "token": return self.token
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.RegistrationResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "status": return self.status
            case "phoneNumber": return self.phoneNumber
            case "password": return self.password
            case "additionalInfo": return self.additionalInfo
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.RegistrationResponse.RegistrationStatus else {
                    return
                }
                self.status = newSubscriptValue
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "additionalInfo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.additionalInfo = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SignInRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SignInRequest> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SignInRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest? {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInRequest {
        return try Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "phoneNumber": return self.phoneNumber
        case "password": return self.password
        case "deviceInfo": return self.deviceInfo
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SignInRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "phoneNumber": return self.phoneNumber
            case "password": return self.password
            case "deviceInfo": return self.deviceInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            case "password":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.password = newSubscriptValue
            case "deviceInfo":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.DeviceInfo else {
                    return
                }
                self.deviceInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SignInResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SignInResponse> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SignInResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse? {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SignInResponse {
        return try Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "result": return self.result
        case "additionalInfo": return self.additionalInfo
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SignInResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "result": return self.result
            case "additionalInfo": return self.additionalInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "result":
                guard let newSubscriptValue = newSubscriptValue as? Com.Sportorganizer.Proto.Msgs.SignInResponse.SignInResult else {
                    return
                }
                self.result = newSubscriptValue
            case "additionalInfo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.additionalInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.DeviceInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.DeviceInfo> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.DeviceInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo? {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.DeviceInfo {
        return try Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "deviceName": return self.deviceName
        case "os": return self.os
        case "platform": return self.platform
        case "processor": return self.processor
        case "additionalParams": return self.additionalParams
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.DeviceInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "deviceName": return self.deviceName
            case "os": return self.os
            case "platform": return self.platform
            case "processor": return self.processor
            case "additionalParams": return self.additionalParams
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "deviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.deviceName = newSubscriptValue
            case "os":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.os = newSubscriptValue
            case "platform":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.platform = newSubscriptValue
            case "processor":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.processor = newSubscriptValue
            case "additionalParams":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.additionalParams = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleNotification: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SimpleNotification> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SimpleNotification>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification? {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotification {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "code": return self.code
        case "text": return self.text
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleNotification.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "code": return self.code
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.code = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush? {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush {
        return try Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "code": return self.code
        case "text": return self.text
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleNotificationPush.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "code": return self.code
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.code = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage> {
        var mergedArray = Array<Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage? {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(data: data, extensionRegistry:Com.Sportorganizer.Proto.Msgs.MessagesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage {
        return try Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "code": return self.code
        case "text": return self.text
        default: return nil
        }
    }
}
extension Com.Sportorganizer.Proto.Msgs.SimpleSystemMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "code": return self.code
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.code = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
