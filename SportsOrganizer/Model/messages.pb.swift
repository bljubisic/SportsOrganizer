// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/messages.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Sportorganizer_Proto_Msgs_ErrorType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case system // = 0
  case business // = 1
  case server // = 2
  case client // = 3
  case unknown // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .system
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .system
    case 1: self = .business
    case 2: self = .server
    case 3: self = .client
    case 4: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .system: return 0
    case .business: return 1
    case .server: return 2
    case .client: return 3
    case .unknown: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///main wrapper message
struct Com_Sportorganizer_Proto_Msgs_AppMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".AppMessage"

  ///required fields
  var channelID: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageChannel {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  var type: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var status: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  ///time-stamps
  var timestamp: String {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  ///error
  var error: Com_Sportorganizer_Proto_Msgs_SysError {
    get {return _storage._error ?? Com_Sportorganizer_Proto_Msgs_SysError()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {_storage._error = nil}

  var handshakeMessage: OneOf_HandshakeMessage? {
    get {return _storage._handshakeMessage}
    set {_uniqueStorage()._handshakeMessage = newValue}
  }

  var initServerMessage: Com_Sportorganizer_Proto_Msgs_InitialServerMessage {
    get {
      if case .initServerMessage(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_InitialServerMessage()
    }
    set {_uniqueStorage()._handshakeMessage = .initServerMessage(newValue)}
  }

  var registrationRequest: Com_Sportorganizer_Proto_Msgs_RegistrationRequest {
    get {
      if case .registrationRequest(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_RegistrationRequest()
    }
    set {_uniqueStorage()._handshakeMessage = .registrationRequest(newValue)}
  }

  var registrationResponse: Com_Sportorganizer_Proto_Msgs_RegistrationResponse {
    get {
      if case .registrationResponse(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_RegistrationResponse()
    }
    set {_uniqueStorage()._handshakeMessage = .registrationResponse(newValue)}
  }

  var registrationToken: Com_Sportorganizer_Proto_Msgs_RegistrationToken {
    get {
      if case .registrationToken(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_RegistrationToken()
    }
    set {_uniqueStorage()._handshakeMessage = .registrationToken(newValue)}
  }

  var registrationConfirm: Com_Sportorganizer_Proto_Msgs_RegistrationConfirm {
    get {
      if case .registrationConfirm(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_RegistrationConfirm()
    }
    set {_uniqueStorage()._handshakeMessage = .registrationConfirm(newValue)}
  }

  var signIn: Com_Sportorganizer_Proto_Msgs_SignInRequest {
    get {
      if case .signIn(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_SignInRequest()
    }
    set {_uniqueStorage()._handshakeMessage = .signIn(newValue)}
  }

  var signInResponse: Com_Sportorganizer_Proto_Msgs_SignInResponse {
    get {
      if case .signInResponse(let v)? = _storage._handshakeMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_SignInResponse()
    }
    set {_uniqueStorage()._handshakeMessage = .signInResponse(newValue)}
  }

  var notificationMessage: OneOf_NotificationMessage? {
    get {return _storage._notificationMessage}
    set {_uniqueStorage()._notificationMessage = newValue}
  }

  var simpleNotification: Com_Sportorganizer_Proto_Msgs_SimpleNotification {
    get {
      if case .simpleNotification(let v)? = _storage._notificationMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_SimpleNotification()
    }
    set {_uniqueStorage()._notificationMessage = .simpleNotification(newValue)}
  }

  /// this is workaround for push messages
  var simpleNotificationPush: Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush {
    get {
      if case .simpleNotificationPush(let v)? = _storage._notificationMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush()
    }
    set {_uniqueStorage()._notificationMessage = .simpleNotificationPush(newValue)}
  }

  var systemMessage: OneOf_SystemMessage? {
    get {return _storage._systemMessage}
    set {_uniqueStorage()._systemMessage = newValue}
  }

  var simpleSystemMessage: Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage {
    get {
      if case .simpleSystemMessage(let v)? = _storage._systemMessage {return v}
      return Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage()
    }
    set {_uniqueStorage()._systemMessage = .simpleSystemMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_HandshakeMessage: Equatable {
    case initServerMessage(Com_Sportorganizer_Proto_Msgs_InitialServerMessage)
    case registrationRequest(Com_Sportorganizer_Proto_Msgs_RegistrationRequest)
    case registrationResponse(Com_Sportorganizer_Proto_Msgs_RegistrationResponse)
    case registrationToken(Com_Sportorganizer_Proto_Msgs_RegistrationToken)
    case registrationConfirm(Com_Sportorganizer_Proto_Msgs_RegistrationConfirm)
    case signIn(Com_Sportorganizer_Proto_Msgs_SignInRequest)
    case signInResponse(Com_Sportorganizer_Proto_Msgs_SignInResponse)

    static func ==(lhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_HandshakeMessage, rhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_HandshakeMessage) -> Bool {
      switch (lhs, rhs) {
      case (.initServerMessage(let l), .initServerMessage(let r)): return l == r
      case (.registrationRequest(let l), .registrationRequest(let r)): return l == r
      case (.registrationResponse(let l), .registrationResponse(let r)): return l == r
      case (.registrationToken(let l), .registrationToken(let r)): return l == r
      case (.registrationConfirm(let l), .registrationConfirm(let r)): return l == r
      case (.signIn(let l), .signIn(let r)): return l == r
      case (.signInResponse(let l), .signInResponse(let r)): return l == r
      default: return false
      }
    }
  }

  enum OneOf_NotificationMessage: Equatable {
    case simpleNotification(Com_Sportorganizer_Proto_Msgs_SimpleNotification)
    /// this is workaround for push messages
    case simpleNotificationPush(Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush)

    static func ==(lhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_NotificationMessage, rhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_NotificationMessage) -> Bool {
      switch (lhs, rhs) {
      case (.simpleNotification(let l), .simpleNotification(let r)): return l == r
      case (.simpleNotificationPush(let l), .simpleNotificationPush(let r)): return l == r
      default: return false
      }
    }
  }

  enum OneOf_SystemMessage: Equatable {
    case simpleSystemMessage(Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage)

    static func ==(lhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_SystemMessage, rhs: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_SystemMessage) -> Bool {
      switch (lhs, rhs) {
      case (.simpleSystemMessage(let l), .simpleSystemMessage(let r)): return l == r
      }
    }
  }

  enum MessageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case error // = 0
    case eventsLite // = 1
    case eventsFull // = 2
    case event // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .error
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .error
      case 1: self = .eventsLite
      case 2: self = .eventsFull
      case 3: self = .event
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .error: return 0
      case .eventsLite: return 1
      case .eventsFull: return 2
      case .event: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum MessageChannel: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case normal // = 0
    case chat // = 1
    case system // = 2
    case hanshake // = 3
    case stream // = 4
    case notification // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .normal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .chat
      case 2: self = .system
      case 3: self = .hanshake
      case 4: self = .stream
      case 5: self = .notification
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .normal: return 0
      case .chat: return 1
      case .system: return 2
      case .hanshake: return 3
      case .stream: return 4
      case .notification: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum MessageStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case notOk // = 1
    case ignored // = 2
    case unexpected // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .notOk
      case 2: self = .ignored
      case 3: self = .unexpected
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .notOk: return 1
      case .ignored: return 2
      case .unexpected: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._channelID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 4: try decoder.decodeSingularStringField(value: &_storage._timestamp)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 6:
          var v: Com_Sportorganizer_Proto_Msgs_InitialServerMessage?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .initServerMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .initServerMessage(v)}
        case 7:
          var v: Com_Sportorganizer_Proto_Msgs_RegistrationRequest?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .registrationRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .registrationRequest(v)}
        case 8:
          var v: Com_Sportorganizer_Proto_Msgs_RegistrationResponse?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .registrationResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .registrationResponse(v)}
        case 9:
          var v: Com_Sportorganizer_Proto_Msgs_RegistrationToken?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .registrationToken(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .registrationToken(v)}
        case 10:
          var v: Com_Sportorganizer_Proto_Msgs_RegistrationConfirm?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .registrationConfirm(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .registrationConfirm(v)}
        case 11:
          var v: Com_Sportorganizer_Proto_Msgs_SignInRequest?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .signIn(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .signIn(v)}
        case 12:
          var v: Com_Sportorganizer_Proto_Msgs_SignInResponse?
          if let current = _storage._handshakeMessage {
            try decoder.handleConflictingOneOf()
            if case .signInResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._handshakeMessage = .signInResponse(v)}
        case 13:
          var v: Com_Sportorganizer_Proto_Msgs_SimpleNotification?
          if let current = _storage._notificationMessage {
            try decoder.handleConflictingOneOf()
            if case .simpleNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._notificationMessage = .simpleNotification(v)}
        case 14:
          var v: Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush?
          if let current = _storage._notificationMessage {
            try decoder.handleConflictingOneOf()
            if case .simpleNotificationPush(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._notificationMessage = .simpleNotificationPush(v)}
        case 15:
          var v: Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage?
          if let current = _storage._systemMessage {
            try decoder.handleConflictingOneOf()
            if case .simpleSystemMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._systemMessage = .simpleSystemMessage(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._channelID != .normal {
        try visitor.visitSingularEnumField(value: _storage._channelID, fieldNumber: 1)
      }
      if _storage._type != .error {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if _storage._status != .ok {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      if !_storage._timestamp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timestamp, fieldNumber: 4)
      }
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      switch _storage._handshakeMessage {
      case .initServerMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .registrationRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .registrationResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .registrationToken(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .registrationConfirm(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .signIn(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .signInResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
      switch _storage._notificationMessage {
      case .simpleNotification(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .simpleNotificationPush(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case nil: break
      }
      if case .simpleSystemMessage(let v)? = _storage._systemMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Sportorganizer_Proto_Msgs_Error: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Error"

  var type: Com_Sportorganizer_Proto_Msgs_ErrorType = .system

  var id: Int32 = 0

  var name: String = String()

  var value: String = String()

  var arguments: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularInt32Field(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      case 5: try decoder.decodeSingularStringField(value: &self.arguments)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .system {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.arguments.isEmpty {
      try visitor.visitSingularStringField(value: self.arguments, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_SysError: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SysError"

  var id: Int32 = 0

  var name: String = String()

  var errors: [Com_Sportorganizer_Proto_Msgs_Error] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.errors)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_InitialServerMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".InitialServerMessage"

  var serverOk: Bool = false

  var additionalInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.serverOk)
      case 2: try decoder.decodeSingularStringField(value: &self.additionalInfo)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.serverOk != false {
      try visitor.visitSingularBoolField(value: self.serverOk, fieldNumber: 1)
    }
    if !self.additionalInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_RegistrationRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegistrationRequest"

  var phoneNumber: String {
    get {return _storage._phoneNumber}
    set {_uniqueStorage()._phoneNumber = newValue}
  }

  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  var alreadyRegistred: Bool {
    get {return _storage._alreadyRegistred}
    set {_uniqueStorage()._alreadyRegistred = newValue}
  }

  var deviceInfo: Com_Sportorganizer_Proto_Msgs_DeviceInfo {
    get {return _storage._deviceInfo ?? Com_Sportorganizer_Proto_Msgs_DeviceInfo()}
    set {_uniqueStorage()._deviceInfo = newValue}
  }
  /// Returns true if `deviceInfo` has been explicitly set.
  var hasDeviceInfo: Bool {return _storage._deviceInfo != nil}
  /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearDeviceInfo() {_storage._deviceInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
        case 2: try decoder.decodeSingularStringField(value: &_storage._username)
        case 3: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._alreadyRegistred)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._deviceInfo)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._phoneNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phoneNumber, fieldNumber: 1)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 2)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 3)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 4)
      }
      if _storage._alreadyRegistred != false {
        try visitor.visitSingularBoolField(value: _storage._alreadyRegistred, fieldNumber: 5)
      }
      if let v = _storage._deviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Sportorganizer_Proto_Msgs_RegistrationToken: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegistrationToken"

  var phoneNumber: String = String()

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.phoneNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_RegistrationConfirm: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegistrationConfirm"

  var phoneNumber: String = String()

  var additionalInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.phoneNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.additionalInfo)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    if !self.additionalInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_RegistrationResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegistrationResponse"

  var status: Com_Sportorganizer_Proto_Msgs_RegistrationResponse.RegistrationStatus = .requestAccepted

  var phoneNumber: String = String()

  var password: String = String()

  var additionalInfo: String = String()

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RegistrationStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case requestAccepted // = 0
    case tokenAccepted // = 1
    case badCredentials // = 2
    case completed // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .requestAccepted
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .requestAccepted
      case 1: self = .tokenAccepted
      case 2: self = .badCredentials
      case 3: self = .completed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .requestAccepted: return 0
      case .tokenAccepted: return 1
      case .badCredentials: return 2
      case .completed: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.phoneNumber)
      case 3: try decoder.decodeSingularStringField(value: &self.password)
      case 4: try decoder.decodeSingularStringField(value: &self.additionalInfo)
      case 5: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .requestAccepted {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if !self.additionalInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalInfo, fieldNumber: 4)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_SignInRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SignInRequest"

  var phoneNumber: String {
    get {return _storage._phoneNumber}
    set {_uniqueStorage()._phoneNumber = newValue}
  }

  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  var deviceInfo: Com_Sportorganizer_Proto_Msgs_DeviceInfo {
    get {return _storage._deviceInfo ?? Com_Sportorganizer_Proto_Msgs_DeviceInfo()}
    set {_uniqueStorage()._deviceInfo = newValue}
  }
  /// Returns true if `deviceInfo` has been explicitly set.
  var hasDeviceInfo: Bool {return _storage._deviceInfo != nil}
  /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearDeviceInfo() {_storage._deviceInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
        case 2: try decoder.decodeSingularStringField(value: &_storage._password)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._deviceInfo)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._phoneNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phoneNumber, fieldNumber: 1)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 2)
      }
      if let v = _storage._deviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Sportorganizer_Proto_Msgs_SignInResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SignInResponse"

  var result: Com_Sportorganizer_Proto_Msgs_SignInResponse.SignInResult = .success

  var additionalInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SignInResult: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case failure // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .success
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .success
      case 1: self = .failure
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .success: return 0
      case .failure: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.additionalInfo)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .success {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.additionalInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_DeviceInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfo"

  var deviceName: String = String()

  var os: String = String()

  var platform: String = String()

  var processor: String = String()

  var additionalParams: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.deviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.os)
      case 3: try decoder.decodeSingularStringField(value: &self.platform)
      case 4: try decoder.decodeSingularStringField(value: &self.processor)
      case 5: try decoder.decodeRepeatedStringField(value: &self.additionalParams)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceName, fieldNumber: 1)
    }
    if !self.os.isEmpty {
      try visitor.visitSingularStringField(value: self.os, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.processor.isEmpty {
      try visitor.visitSingularStringField(value: self.processor, fieldNumber: 4)
    }
    if !self.additionalParams.isEmpty {
      try visitor.visitRepeatedStringField(value: self.additionalParams, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_SimpleNotification: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SimpleNotification"

  var code: Int32 = 0

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SimpleNotificationPush"

  var code: Int32 = 0

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SimpleSystemMessage"

  var code: Int32 = 0

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.sportorganizer.proto.msgs"

extension Com_Sportorganizer_Proto_Msgs_ErrorType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SYSTEM"),
    1: .same(proto: "BUSINESS"),
    2: .same(proto: "SERVER"),
    3: .same(proto: "CLIENT"),
    4: .same(proto: "UNKNOWN"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_AppMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channelId"),
    2: .same(proto: "type"),
    3: .same(proto: "status"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "error"),
    6: .same(proto: "initServerMessage"),
    7: .same(proto: "registrationRequest"),
    8: .same(proto: "registrationResponse"),
    9: .same(proto: "registrationToken"),
    10: .same(proto: "registrationConfirm"),
    11: .same(proto: "signIn"),
    12: .same(proto: "signInResponse"),
    13: .same(proto: "simpleNotification"),
    14: .same(proto: "simpleNotificationPush"),
    15: .same(proto: "simpleSystemMessage"),
  ]

  fileprivate class _StorageClass {
    var _channelID: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageChannel = .normal
    var _type: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageType = .error
    var _status: Com_Sportorganizer_Proto_Msgs_AppMessage.MessageStatus = .ok
    var _timestamp: String = String()
    var _error: Com_Sportorganizer_Proto_Msgs_SysError? = nil
    var _handshakeMessage: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_HandshakeMessage?
    var _notificationMessage: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_NotificationMessage?
    var _systemMessage: Com_Sportorganizer_Proto_Msgs_AppMessage.OneOf_SystemMessage?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _type = source._type
      _status = source._status
      _timestamp = source._timestamp
      _error = source._error
      _handshakeMessage = source._handshakeMessage
      _notificationMessage = source._notificationMessage
      _systemMessage = source._systemMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_AppMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelID != other_storage._channelID {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._error != other_storage._error {return false}
        if _storage._handshakeMessage != other_storage._handshakeMessage {return false}
        if _storage._notificationMessage != other_storage._notificationMessage {return false}
        if _storage._systemMessage != other_storage._systemMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_AppMessage.MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR"),
    1: .same(proto: "EVENTS_LITE"),
    2: .same(proto: "EVENTS_FULL"),
    3: .same(proto: "EVENT"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_AppMessage.MessageChannel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "CHAT"),
    2: .same(proto: "SYSTEM"),
    3: .same(proto: "HANSHAKE"),
    4: .same(proto: "STREAM"),
    5: .same(proto: "NOTIFICATION"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_AppMessage.MessageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NOT_OK"),
    2: .same(proto: "IGNORED"),
    3: .same(proto: "UNEXPECTED"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_Error: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "id"),
    3: .same(proto: "name"),
    4: .same(proto: "value"),
    5: .same(proto: "arguments"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_Error) -> Bool {
    if self.type != other.type {return false}
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.value != other.value {return false}
    if self.arguments != other.arguments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SysError: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "errors"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SysError) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.errors != other.errors {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_InitialServerMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serverOk"),
    2: .same(proto: "additionalInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_InitialServerMessage) -> Bool {
    if self.serverOk != other.serverOk {return false}
    if self.additionalInfo != other.additionalInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_RegistrationRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneNumber"),
    2: .same(proto: "username"),
    3: .same(proto: "firstName"),
    4: .same(proto: "lastName"),
    5: .same(proto: "alreadyRegistred"),
    6: .same(proto: "deviceInfo"),
  ]

  fileprivate class _StorageClass {
    var _phoneNumber: String = String()
    var _username: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _alreadyRegistred: Bool = false
    var _deviceInfo: Com_Sportorganizer_Proto_Msgs_DeviceInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _phoneNumber = source._phoneNumber
      _username = source._username
      _firstName = source._firstName
      _lastName = source._lastName
      _alreadyRegistred = source._alreadyRegistred
      _deviceInfo = source._deviceInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_RegistrationRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._phoneNumber != other_storage._phoneNumber {return false}
        if _storage._username != other_storage._username {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._alreadyRegistred != other_storage._alreadyRegistred {return false}
        if _storage._deviceInfo != other_storage._deviceInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_RegistrationToken: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneNumber"),
    2: .same(proto: "token"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_RegistrationToken) -> Bool {
    if self.phoneNumber != other.phoneNumber {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_RegistrationConfirm: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneNumber"),
    2: .same(proto: "additionalInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_RegistrationConfirm) -> Bool {
    if self.phoneNumber != other.phoneNumber {return false}
    if self.additionalInfo != other.additionalInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_RegistrationResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "phoneNumber"),
    3: .same(proto: "password"),
    4: .same(proto: "additionalInfo"),
    5: .same(proto: "token"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_RegistrationResponse) -> Bool {
    if self.status != other.status {return false}
    if self.phoneNumber != other.phoneNumber {return false}
    if self.password != other.password {return false}
    if self.additionalInfo != other.additionalInfo {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_RegistrationResponse.RegistrationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REQUEST_ACCEPTED"),
    1: .same(proto: "TOKEN_ACCEPTED"),
    2: .same(proto: "BAD_CREDENTIALS"),
    3: .same(proto: "COMPLETED"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_SignInRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneNumber"),
    2: .same(proto: "password"),
    5: .same(proto: "deviceInfo"),
  ]

  fileprivate class _StorageClass {
    var _phoneNumber: String = String()
    var _password: String = String()
    var _deviceInfo: Com_Sportorganizer_Proto_Msgs_DeviceInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _phoneNumber = source._phoneNumber
      _password = source._password
      _deviceInfo = source._deviceInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SignInRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._phoneNumber != other_storage._phoneNumber {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._deviceInfo != other_storage._deviceInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SignInResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "additionalInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SignInResponse) -> Bool {
    if self.result != other.result {return false}
    if self.additionalInfo != other.additionalInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SignInResponse.SignInResult: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "FAILURE"),
  ]
}

extension Com_Sportorganizer_Proto_Msgs_DeviceInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deviceName"),
    2: .same(proto: "os"),
    3: .same(proto: "platform"),
    4: .same(proto: "processor"),
    5: .same(proto: "additionalParams"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_DeviceInfo) -> Bool {
    if self.deviceName != other.deviceName {return false}
    if self.os != other.os {return false}
    if self.platform != other.platform {return false}
    if self.processor != other.processor {return false}
    if self.additionalParams != other.additionalParams {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SimpleNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SimpleNotification) -> Bool {
    if self.code != other.code {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SimpleNotificationPush) -> Bool {
    if self.code != other.code {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Com_Sportorganizer_Proto_Msgs_SimpleSystemMessage) -> Bool {
    if self.code != other.code {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
